
lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f38  08002f38  00012f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f5c  08002f5c  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08002f5c  08002f5c  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f5c  08002f5c  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f5c  08002f5c  00012f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f60  08002f60  00012f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08002f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000054  08002fb8  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08002fb8  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000990f  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c52  00000000  00000000  0002998c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002b5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002c030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016efb  00000000  00000000  0002c960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c734  00000000  00000000  0004385b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000820af  00000000  00000000  0004ff8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d203e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002818  00000000  00000000  000d2094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f20 	.word	0x08002f20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08002f20 	.word	0x08002f20

0800014c <display7seg_1>:
#include "7segment.h"

int led_buffer[4] = {0,0,0,0};
int index_led_1 = 0;

void display7seg_1(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,
 8000154:	2200      	movs	r2, #0
 8000156:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 800015a:	4858      	ldr	r0, [pc, #352]	; (80002bc <display7seg_1+0x170>)
 800015c:	f001 fecb 	bl	8001ef6 <HAL_GPIO_WritePin>
			GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13
					| GPIO_PIN_14 | GPIO_PIN_15, RESET);
	HAL_GPIO_WritePin(GPIOB,
 8000160:	2201      	movs	r2, #1
 8000162:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 8000166:	4856      	ldr	r0, [pc, #344]	; (80002c0 <display7seg_1+0x174>)
 8000168:	f001 fec5 	bl	8001ef6 <HAL_GPIO_WritePin>
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2b09      	cmp	r3, #9
 8000170:	f200 80a0 	bhi.w	80002b4 <display7seg_1+0x168>
 8000174:	a201      	add	r2, pc, #4	; (adr r2, 800017c <display7seg_1+0x30>)
 8000176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800017a:	bf00      	nop
 800017c:	080001a5 	.word	0x080001a5
 8000180:	080001b3 	.word	0x080001b3
 8000184:	080001f1 	.word	0x080001f1
 8000188:	0800020b 	.word	0x0800020b
 800018c:	08000225 	.word	0x08000225
 8000190:	0800024b 	.word	0x0800024b
 8000194:	08000265 	.word	0x08000265
 8000198:	08000273 	.word	0x08000273
 800019c:	080002b3 	.word	0x080002b3
 80001a0:	080002a5 	.word	0x080002a5
				GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13
						| GPIO_PIN_14 | GPIO_PIN_15, SET);
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 80001a4:	2201      	movs	r2, #1
 80001a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001aa:	4844      	ldr	r0, [pc, #272]	; (80002bc <display7seg_1+0x170>)
 80001ac:	f001 fea3 	bl	8001ef6 <HAL_GPIO_WritePin>
		break;
 80001b0:	e080      	b.n	80002b4 <display7seg_1+0x168>
	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 80001b2:	2201      	movs	r2, #1
 80001b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001b8:	4840      	ldr	r0, [pc, #256]	; (80002bc <display7seg_1+0x170>)
 80001ba:	f001 fe9c 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 80001be:	2201      	movs	r2, #1
 80001c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001c4:	483d      	ldr	r0, [pc, #244]	; (80002bc <display7seg_1+0x170>)
 80001c6:	f001 fe96 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, SET);
 80001ca:	2201      	movs	r2, #1
 80001cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d0:	483a      	ldr	r0, [pc, #232]	; (80002bc <display7seg_1+0x170>)
 80001d2:	f001 fe90 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, SET);
 80001d6:	2201      	movs	r2, #1
 80001d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001dc:	4837      	ldr	r0, [pc, #220]	; (80002bc <display7seg_1+0x170>)
 80001de:	f001 fe8a 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001e8:	4834      	ldr	r0, [pc, #208]	; (80002bc <display7seg_1+0x170>)
 80001ea:	f001 fe84 	bl	8001ef6 <HAL_GPIO_WritePin>
		break;
 80001ee:	e061      	b.n	80002b4 <display7seg_1+0x168>
	case 2:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, SET);
 80001f0:	2201      	movs	r2, #1
 80001f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001f6:	4831      	ldr	r0, [pc, #196]	; (80002bc <display7seg_1+0x170>)
 80001f8:	f001 fe7d 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000202:	482e      	ldr	r0, [pc, #184]	; (80002bc <display7seg_1+0x170>)
 8000204:	f001 fe77 	bl	8001ef6 <HAL_GPIO_WritePin>
		break;
 8000208:	e054      	b.n	80002b4 <display7seg_1+0x168>
	case 3:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, SET);
 800020a:	2201      	movs	r2, #1
 800020c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000210:	482a      	ldr	r0, [pc, #168]	; (80002bc <display7seg_1+0x170>)
 8000212:	f001 fe70 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, SET);
 8000216:	2201      	movs	r2, #1
 8000218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800021c:	4827      	ldr	r0, [pc, #156]	; (80002bc <display7seg_1+0x170>)
 800021e:	f001 fe6a 	bl	8001ef6 <HAL_GPIO_WritePin>
		break;
 8000222:	e047      	b.n	80002b4 <display7seg_1+0x168>
	case 4:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8000224:	2201      	movs	r2, #1
 8000226:	f44f 7100 	mov.w	r1, #512	; 0x200
 800022a:	4824      	ldr	r0, [pc, #144]	; (80002bc <display7seg_1+0x170>)
 800022c:	f001 fe63 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000230:	2201      	movs	r2, #1
 8000232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000236:	4821      	ldr	r0, [pc, #132]	; (80002bc <display7seg_1+0x170>)
 8000238:	f001 fe5d 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, SET);
 800023c:	2201      	movs	r2, #1
 800023e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000242:	481e      	ldr	r0, [pc, #120]	; (80002bc <display7seg_1+0x170>)
 8000244:	f001 fe57 	bl	8001ef6 <HAL_GPIO_WritePin>

		break;
 8000248:	e034      	b.n	80002b4 <display7seg_1+0x168>
	case 5:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 800024a:	2201      	movs	r2, #1
 800024c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000250:	481a      	ldr	r0, [pc, #104]	; (80002bc <display7seg_1+0x170>)
 8000252:	f001 fe50 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, SET);
 8000256:	2201      	movs	r2, #1
 8000258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800025c:	4817      	ldr	r0, [pc, #92]	; (80002bc <display7seg_1+0x170>)
 800025e:	f001 fe4a 	bl	8001ef6 <HAL_GPIO_WritePin>
		break;
 8000262:	e027      	b.n	80002b4 <display7seg_1+0x168>
	case 6:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8000264:	2201      	movs	r2, #1
 8000266:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800026a:	4814      	ldr	r0, [pc, #80]	; (80002bc <display7seg_1+0x170>)
 800026c:	f001 fe43 	bl	8001ef6 <HAL_GPIO_WritePin>
		break;
 8000270:	e020      	b.n	80002b4 <display7seg_1+0x168>
	case 7:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000272:	2201      	movs	r2, #1
 8000274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000278:	4810      	ldr	r0, [pc, #64]	; (80002bc <display7seg_1+0x170>)
 800027a:	f001 fe3c 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, SET);
 800027e:	2201      	movs	r2, #1
 8000280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000284:	480d      	ldr	r0, [pc, #52]	; (80002bc <display7seg_1+0x170>)
 8000286:	f001 fe36 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, SET);
 800028a:	2201      	movs	r2, #1
 800028c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000290:	480a      	ldr	r0, [pc, #40]	; (80002bc <display7seg_1+0x170>)
 8000292:	f001 fe30 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, SET);
 8000296:	2201      	movs	r2, #1
 8000298:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <display7seg_1+0x170>)
 800029e:	f001 fe2a 	bl	8001ef6 <HAL_GPIO_WritePin>
		break;
 80002a2:	e007      	b.n	80002b4 <display7seg_1+0x168>
	case 8:
		break;
	case 9:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, SET);
 80002a4:	2201      	movs	r2, #1
 80002a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002aa:	4804      	ldr	r0, [pc, #16]	; (80002bc <display7seg_1+0x170>)
 80002ac:	f001 fe23 	bl	8001ef6 <HAL_GPIO_WritePin>
		break;
 80002b0:	e000      	b.n	80002b4 <display7seg_1+0x168>
		break;
 80002b2:	bf00      	nop
	}
}
 80002b4:	bf00      	nop
 80002b6:	3708      	adds	r7, #8
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40010800 	.word	0x40010800
 80002c0:	40010c00 	.word	0x40010c00

080002c4 <display7seg_2>:

void display7seg_2(int num) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB,
 80002cc:	2200      	movs	r2, #0
 80002ce:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 80002d2:	4858      	ldr	r0, [pc, #352]	; (8000434 <display7seg_2+0x170>)
 80002d4:	f001 fe0f 	bl	8001ef6 <HAL_GPIO_WritePin>
			GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13
					| GPIO_PIN_14 | GPIO_PIN_15, RESET);
	HAL_GPIO_WritePin(GPIOA,
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 80002de:	4856      	ldr	r0, [pc, #344]	; (8000438 <display7seg_2+0x174>)
 80002e0:	f001 fe09 	bl	8001ef6 <HAL_GPIO_WritePin>
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b09      	cmp	r3, #9
 80002e8:	f200 80a0 	bhi.w	800042c <display7seg_2+0x168>
 80002ec:	a201      	add	r2, pc, #4	; (adr r2, 80002f4 <display7seg_2+0x30>)
 80002ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f2:	bf00      	nop
 80002f4:	0800031d 	.word	0x0800031d
 80002f8:	0800032b 	.word	0x0800032b
 80002fc:	08000369 	.word	0x08000369
 8000300:	08000383 	.word	0x08000383
 8000304:	0800039d 	.word	0x0800039d
 8000308:	080003c3 	.word	0x080003c3
 800030c:	080003dd 	.word	0x080003dd
 8000310:	080003eb 	.word	0x080003eb
 8000314:	0800042b 	.word	0x0800042b
 8000318:	0800041d 	.word	0x0800041d
				GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13
						| GPIO_PIN_14 | GPIO_PIN_15, SET);
	switch (num) {
	case 0:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000322:	4844      	ldr	r0, [pc, #272]	; (8000434 <display7seg_2+0x170>)
 8000324:	f001 fde7 	bl	8001ef6 <HAL_GPIO_WritePin>
		break;
 8000328:	e080      	b.n	800042c <display7seg_2+0x168>
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 800032a:	2201      	movs	r2, #1
 800032c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000330:	4840      	ldr	r0, [pc, #256]	; (8000434 <display7seg_2+0x170>)
 8000332:	f001 fde0 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8000336:	2201      	movs	r2, #1
 8000338:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800033c:	483d      	ldr	r0, [pc, #244]	; (8000434 <display7seg_2+0x170>)
 800033e:	f001 fdda 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 8000342:	2201      	movs	r2, #1
 8000344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000348:	483a      	ldr	r0, [pc, #232]	; (8000434 <display7seg_2+0x170>)
 800034a:	f001 fdd4 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 800034e:	2201      	movs	r2, #1
 8000350:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000354:	4837      	ldr	r0, [pc, #220]	; (8000434 <display7seg_2+0x170>)
 8000356:	f001 fdce 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 800035a:	2201      	movs	r2, #1
 800035c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000360:	4834      	ldr	r0, [pc, #208]	; (8000434 <display7seg_2+0x170>)
 8000362:	f001 fdc8 	bl	8001ef6 <HAL_GPIO_WritePin>
		break;
 8000366:	e061      	b.n	800042c <display7seg_2+0x168>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000368:	2201      	movs	r2, #1
 800036a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800036e:	4831      	ldr	r0, [pc, #196]	; (8000434 <display7seg_2+0x170>)
 8000370:	f001 fdc1 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, SET);
 8000374:	2201      	movs	r2, #1
 8000376:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800037a:	482e      	ldr	r0, [pc, #184]	; (8000434 <display7seg_2+0x170>)
 800037c:	f001 fdbb 	bl	8001ef6 <HAL_GPIO_WritePin>
		break;
 8000380:	e054      	b.n	800042c <display7seg_2+0x168>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000382:	2201      	movs	r2, #1
 8000384:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000388:	482a      	ldr	r0, [pc, #168]	; (8000434 <display7seg_2+0x170>)
 800038a:	f001 fdb4 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 800038e:	2201      	movs	r2, #1
 8000390:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000394:	4827      	ldr	r0, [pc, #156]	; (8000434 <display7seg_2+0x170>)
 8000396:	f001 fdae 	bl	8001ef6 <HAL_GPIO_WritePin>
		break;
 800039a:	e047      	b.n	800042c <display7seg_2+0x168>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a2:	4824      	ldr	r0, [pc, #144]	; (8000434 <display7seg_2+0x170>)
 80003a4:	f001 fda7 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ae:	4821      	ldr	r0, [pc, #132]	; (8000434 <display7seg_2+0x170>)
 80003b0:	f001 fda1 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 80003b4:	2201      	movs	r2, #1
 80003b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ba:	481e      	ldr	r0, [pc, #120]	; (8000434 <display7seg_2+0x170>)
 80003bc:	f001 fd9b 	bl	8001ef6 <HAL_GPIO_WritePin>

		break;
 80003c0:	e034      	b.n	800042c <display7seg_2+0x168>
	case 5:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 80003c2:	2201      	movs	r2, #1
 80003c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c8:	481a      	ldr	r0, [pc, #104]	; (8000434 <display7seg_2+0x170>)
 80003ca:	f001 fd94 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d4:	4817      	ldr	r0, [pc, #92]	; (8000434 <display7seg_2+0x170>)
 80003d6:	f001 fd8e 	bl	8001ef6 <HAL_GPIO_WritePin>
		break;
 80003da:	e027      	b.n	800042c <display7seg_2+0x168>
	case 6:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e2:	4814      	ldr	r0, [pc, #80]	; (8000434 <display7seg_2+0x170>)
 80003e4:	f001 fd87 	bl	8001ef6 <HAL_GPIO_WritePin>
		break;
 80003e8:	e020      	b.n	800042c <display7seg_2+0x168>
	case 7:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003f0:	4810      	ldr	r0, [pc, #64]	; (8000434 <display7seg_2+0x170>)
 80003f2:	f001 fd80 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 80003f6:	2201      	movs	r2, #1
 80003f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fc:	480d      	ldr	r0, [pc, #52]	; (8000434 <display7seg_2+0x170>)
 80003fe:	f001 fd7a 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000402:	2201      	movs	r2, #1
 8000404:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000408:	480a      	ldr	r0, [pc, #40]	; (8000434 <display7seg_2+0x170>)
 800040a:	f001 fd74 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 800040e:	2201      	movs	r2, #1
 8000410:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000414:	4807      	ldr	r0, [pc, #28]	; (8000434 <display7seg_2+0x170>)
 8000416:	f001 fd6e 	bl	8001ef6 <HAL_GPIO_WritePin>
		break;
 800041a:	e007      	b.n	800042c <display7seg_2+0x168>
	case 8:
		break;
	case 9:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000422:	4804      	ldr	r0, [pc, #16]	; (8000434 <display7seg_2+0x170>)
 8000424:	f001 fd67 	bl	8001ef6 <HAL_GPIO_WritePin>
		break;
 8000428:	e000      	b.n	800042c <display7seg_2+0x168>
		break;
 800042a:	bf00      	nop
	}
}
 800042c:	bf00      	nop
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40010c00 	.word	0x40010c00
 8000438:	40010800 	.word	0x40010800

0800043c <update7seg>:
void update7seg(int index) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b03      	cmp	r3, #3
 8000448:	d87a      	bhi.n	8000540 <update7seg+0x104>
 800044a:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <update7seg+0x14>)
 800044c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000450:	08000461 	.word	0x08000461
 8000454:	08000499 	.word	0x08000499
 8000458:	080004d1 	.word	0x080004d1
 800045c:	08000509 	.word	0x08000509
	switch (index) {
	case 0:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2180      	movs	r1, #128	; 0x80
 8000464:	4838      	ldr	r0, [pc, #224]	; (8000548 <update7seg+0x10c>)
 8000466:	f001 fd46 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 800046a:	2201      	movs	r2, #1
 800046c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000470:	4835      	ldr	r0, [pc, #212]	; (8000548 <update7seg+0x10c>)
 8000472:	f001 fd40 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	2180      	movs	r1, #128	; 0x80
 800047a:	4834      	ldr	r0, [pc, #208]	; (800054c <update7seg+0x110>)
 800047c:	f001 fd3b 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000486:	4831      	ldr	r0, [pc, #196]	; (800054c <update7seg+0x110>)
 8000488:	f001 fd35 	bl	8001ef6 <HAL_GPIO_WritePin>
		display7seg_1(led_buffer[0]);
 800048c:	4b30      	ldr	r3, [pc, #192]	; (8000550 <update7seg+0x114>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff fe5b 	bl	800014c <display7seg_1>
		break;
 8000496:	e053      	b.n	8000540 <update7seg+0x104>
	case 1:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 8000498:	2201      	movs	r2, #1
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	482a      	ldr	r0, [pc, #168]	; (8000548 <update7seg+0x10c>)
 800049e:	f001 fd2a 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a8:	4827      	ldr	r0, [pc, #156]	; (8000548 <update7seg+0x10c>)
 80004aa:	f001 fd24 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	4826      	ldr	r0, [pc, #152]	; (800054c <update7seg+0x110>)
 80004b4:	f001 fd1f 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004be:	4823      	ldr	r0, [pc, #140]	; (800054c <update7seg+0x110>)
 80004c0:	f001 fd19 	bl	8001ef6 <HAL_GPIO_WritePin>
		display7seg_1(led_buffer[1]);
 80004c4:	4b22      	ldr	r3, [pc, #136]	; (8000550 <update7seg+0x114>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff fe3f 	bl	800014c <display7seg_1>
		break;
 80004ce:	e037      	b.n	8000540 <update7seg+0x104>
	case 2:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2180      	movs	r1, #128	; 0x80
 80004d4:	481c      	ldr	r0, [pc, #112]	; (8000548 <update7seg+0x10c>)
 80004d6:	f001 fd0e 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e0:	4819      	ldr	r0, [pc, #100]	; (8000548 <update7seg+0x10c>)
 80004e2:	f001 fd08 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2180      	movs	r1, #128	; 0x80
 80004ea:	4818      	ldr	r0, [pc, #96]	; (800054c <update7seg+0x110>)
 80004ec:	f001 fd03 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f6:	4815      	ldr	r0, [pc, #84]	; (800054c <update7seg+0x110>)
 80004f8:	f001 fcfd 	bl	8001ef6 <HAL_GPIO_WritePin>
		display7seg_2(led_buffer[2]);
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <update7seg+0x114>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fedf 	bl	80002c4 <display7seg_2>
		break;
 8000506:	e01b      	b.n	8000540 <update7seg+0x104>
	case 3:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	480e      	ldr	r0, [pc, #56]	; (8000548 <update7seg+0x10c>)
 800050e:	f001 fcf2 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000512:	2200      	movs	r2, #0
 8000514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000518:	480b      	ldr	r0, [pc, #44]	; (8000548 <update7seg+0x10c>)
 800051a:	f001 fcec 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 800051e:	2201      	movs	r2, #1
 8000520:	2180      	movs	r1, #128	; 0x80
 8000522:	480a      	ldr	r0, [pc, #40]	; (800054c <update7seg+0x110>)
 8000524:	f001 fce7 	bl	8001ef6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800052e:	4807      	ldr	r0, [pc, #28]	; (800054c <update7seg+0x110>)
 8000530:	f001 fce1 	bl	8001ef6 <HAL_GPIO_WritePin>
		display7seg_2(led_buffer[3]);
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <update7seg+0x114>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff fec3 	bl	80002c4 <display7seg_2>
		break;
 800053e:	bf00      	nop
	}
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40010800 	.word	0x40010800
 800054c:	40010c00 	.word	0x40010c00
 8000550:	20000070 	.word	0x20000070

08000554 <update7segBuffer>:

void update7segBuffer(int num1, int num2) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
	if (num1 >= 10) {
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b09      	cmp	r3, #9
 8000562:	dd17      	ble.n	8000594 <update7segBuffer+0x40>
		led_buffer[0] = num1 / 10;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a36      	ldr	r2, [pc, #216]	; (8000640 <update7segBuffer+0xec>)
 8000568:	fb82 1203 	smull	r1, r2, r2, r3
 800056c:	1092      	asrs	r2, r2, #2
 800056e:	17db      	asrs	r3, r3, #31
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	4a34      	ldr	r2, [pc, #208]	; (8000644 <update7segBuffer+0xf0>)
 8000574:	6013      	str	r3, [r2, #0]
		led_buffer[1] = num1 % 10;
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	4b31      	ldr	r3, [pc, #196]	; (8000640 <update7segBuffer+0xec>)
 800057a:	fb83 2301 	smull	r2, r3, r3, r1
 800057e:	109a      	asrs	r2, r3, #2
 8000580:	17cb      	asrs	r3, r1, #31
 8000582:	1ad2      	subs	r2, r2, r3
 8000584:	4613      	mov	r3, r2
 8000586:	009b      	lsls	r3, r3, #2
 8000588:	4413      	add	r3, r2
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	1aca      	subs	r2, r1, r3
 800058e:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <update7segBuffer+0xf0>)
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	e013      	b.n	80005bc <update7segBuffer+0x68>
	} else if (num1 < 10) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b09      	cmp	r3, #9
 8000598:	dc10      	bgt.n	80005bc <update7segBuffer+0x68>
		led_buffer[0] = 0;
 800059a:	4b2a      	ldr	r3, [pc, #168]	; (8000644 <update7segBuffer+0xf0>)
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
		led_buffer[1] = num1 % 10;
 80005a0:	6879      	ldr	r1, [r7, #4]
 80005a2:	4b27      	ldr	r3, [pc, #156]	; (8000640 <update7segBuffer+0xec>)
 80005a4:	fb83 2301 	smull	r2, r3, r3, r1
 80005a8:	109a      	asrs	r2, r3, #2
 80005aa:	17cb      	asrs	r3, r1, #31
 80005ac:	1ad2      	subs	r2, r2, r3
 80005ae:	4613      	mov	r3, r2
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	4413      	add	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	1aca      	subs	r2, r1, r3
 80005b8:	4b22      	ldr	r3, [pc, #136]	; (8000644 <update7segBuffer+0xf0>)
 80005ba:	605a      	str	r2, [r3, #4]
	}
	if (num2 >= 10) {
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	2b09      	cmp	r3, #9
 80005c0:	dd17      	ble.n	80005f2 <update7segBuffer+0x9e>
		led_buffer[2] = num2 / 10;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	4a1e      	ldr	r2, [pc, #120]	; (8000640 <update7segBuffer+0xec>)
 80005c6:	fb82 1203 	smull	r1, r2, r2, r3
 80005ca:	1092      	asrs	r2, r2, #2
 80005cc:	17db      	asrs	r3, r3, #31
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	4a1c      	ldr	r2, [pc, #112]	; (8000644 <update7segBuffer+0xf0>)
 80005d2:	6093      	str	r3, [r2, #8]
		led_buffer[3] = num2 % 10;
 80005d4:	6839      	ldr	r1, [r7, #0]
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <update7segBuffer+0xec>)
 80005d8:	fb83 2301 	smull	r2, r3, r3, r1
 80005dc:	109a      	asrs	r2, r3, #2
 80005de:	17cb      	asrs	r3, r1, #31
 80005e0:	1ad2      	subs	r2, r2, r3
 80005e2:	4613      	mov	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	4413      	add	r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	1aca      	subs	r2, r1, r3
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <update7segBuffer+0xf0>)
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	e013      	b.n	800061a <update7segBuffer+0xc6>
	} else if (num2 < 10) {
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2b09      	cmp	r3, #9
 80005f6:	dc10      	bgt.n	800061a <update7segBuffer+0xc6>
		led_buffer[2] = 0;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <update7segBuffer+0xf0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
		led_buffer[3] = num2 % 10;
 80005fe:	6839      	ldr	r1, [r7, #0]
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <update7segBuffer+0xec>)
 8000602:	fb83 2301 	smull	r2, r3, r3, r1
 8000606:	109a      	asrs	r2, r3, #2
 8000608:	17cb      	asrs	r3, r1, #31
 800060a:	1ad2      	subs	r2, r2, r3
 800060c:	4613      	mov	r3, r2
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	4413      	add	r3, r2
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	1aca      	subs	r2, r1, r3
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <update7segBuffer+0xf0>)
 8000618:	60da      	str	r2, [r3, #12]
	}
	if (index_led_1 >= 4)
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <update7segBuffer+0xf4>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2b03      	cmp	r3, #3
 8000620:	dd02      	ble.n	8000628 <update7segBuffer+0xd4>
		index_led_1 = 0;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <update7segBuffer+0xf4>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
	update7seg(index_led_1++);
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <update7segBuffer+0xf4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	1c5a      	adds	r2, r3, #1
 800062e:	4906      	ldr	r1, [pc, #24]	; (8000648 <update7segBuffer+0xf4>)
 8000630:	600a      	str	r2, [r1, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ff02 	bl	800043c <update7seg>

}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	66666667 	.word	0x66666667
 8000644:	20000070 	.word	0x20000070
 8000648:	20000080 	.word	0x20000080

0800064c <getKeyInput>:
int button__pressed = 0;
int button_long_pressed = 0;
int button_flag[NUM_BUT] = {0};


void getKeyInput(){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	for(int i=0;i<NUM_BUT;i++){
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	e089      	b.n	800076c <getKeyInput+0x120>
  KeyReg2[i] = KeyReg1[i];
 8000658:	4a49      	ldr	r2, [pc, #292]	; (8000780 <getKeyInput+0x134>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000660:	4948      	ldr	r1, [pc, #288]	; (8000784 <getKeyInput+0x138>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  KeyReg1[i] = KeyReg0[i];
 8000668:	4a47      	ldr	r2, [pc, #284]	; (8000788 <getKeyInput+0x13c>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000670:	4943      	ldr	r1, [pc, #268]	; (8000780 <getKeyInput+0x134>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  // Add your key
		if (i == 0) {
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d10a      	bne.n	8000694 <getKeyInput+0x48>
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 800067e:	2108      	movs	r1, #8
 8000680:	4842      	ldr	r0, [pc, #264]	; (800078c <getKeyInput+0x140>)
 8000682:	f001 fc21 	bl	8001ec8 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	4619      	mov	r1, r3
 800068a:	4a3f      	ldr	r2, [pc, #252]	; (8000788 <getKeyInput+0x13c>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000692:	e01a      	b.n	80006ca <getKeyInput+0x7e>
		} else if (i == 1) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d10a      	bne.n	80006b0 <getKeyInput+0x64>
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 800069a:	2110      	movs	r1, #16
 800069c:	483b      	ldr	r0, [pc, #236]	; (800078c <getKeyInput+0x140>)
 800069e:	f001 fc13 	bl	8001ec8 <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4619      	mov	r1, r3
 80006a6:	4a38      	ldr	r2, [pc, #224]	; (8000788 <getKeyInput+0x13c>)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80006ae:	e00c      	b.n	80006ca <getKeyInput+0x7e>
		} else if (i == 2) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b02      	cmp	r3, #2
 80006b4:	d109      	bne.n	80006ca <getKeyInput+0x7e>
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80006b6:	2120      	movs	r1, #32
 80006b8:	4834      	ldr	r0, [pc, #208]	; (800078c <getKeyInput+0x140>)
 80006ba:	f001 fc05 	bl	8001ec8 <HAL_GPIO_ReadPin>
 80006be:	4603      	mov	r3, r0
 80006c0:	4619      	mov	r1, r3
 80006c2:	4a31      	ldr	r2, [pc, #196]	; (8000788 <getKeyInput+0x13c>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80006ca:	4a2d      	ldr	r2, [pc, #180]	; (8000780 <getKeyInput+0x134>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006d2:	492d      	ldr	r1, [pc, #180]	; (8000788 <getKeyInput+0x13c>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d143      	bne.n	8000766 <getKeyInput+0x11a>
 80006de:	4a28      	ldr	r2, [pc, #160]	; (8000780 <getKeyInput+0x134>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006e6:	4927      	ldr	r1, [pc, #156]	; (8000784 <getKeyInput+0x138>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d139      	bne.n	8000766 <getKeyInput+0x11a>
    if (KeyReg2[i] != KeyReg3[i]){
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <getKeyInput+0x138>)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006fa:	4925      	ldr	r1, [pc, #148]	; (8000790 <getKeyInput+0x144>)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000702:	429a      	cmp	r2, r3
 8000704:	d017      	beq.n	8000736 <getKeyInput+0xea>
      KeyReg3[i] = KeyReg2[i];
 8000706:	4a1f      	ldr	r2, [pc, #124]	; (8000784 <getKeyInput+0x138>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800070e:	4920      	ldr	r1, [pc, #128]	; (8000790 <getKeyInput+0x144>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (KeyReg3[i] == PRESSED_STATE){
 8000716:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <getKeyInput+0x144>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d121      	bne.n	8000766 <getKeyInput+0x11a>
        TimeOutForKeyPress = 500;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <getKeyInput+0x148>)
 8000724:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000728:	601a      	str	r2, [r3, #0]
        //subKeyProcess();
        button_flag[i] = 1;
 800072a:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <getKeyInput+0x14c>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2101      	movs	r1, #1
 8000730:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000734:	e017      	b.n	8000766 <getKeyInput+0x11a>
      }

    }else{
        TimeOutForKeyPress --;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <getKeyInput+0x148>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3b01      	subs	r3, #1
 800073c:	4a15      	ldr	r2, [pc, #84]	; (8000794 <getKeyInput+0x148>)
 800073e:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <getKeyInput+0x148>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d10e      	bne.n	8000766 <getKeyInput+0x11a>
        	TimeOutForKeyPress = 500;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <getKeyInput+0x148>)
 800074a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800074e:	601a      	str	r2, [r3, #0]
        	if (KeyReg3[i] == PRESSED_STATE){
 8000750:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <getKeyInput+0x144>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d104      	bne.n	8000766 <getKeyInput+0x11a>
        		//subKeyProcess();
        		button_flag[i] = 1;
 800075c:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <getKeyInput+0x14c>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2101      	movs	r1, #1
 8000762:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<NUM_BUT;i++){
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3301      	adds	r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b02      	cmp	r3, #2
 8000770:	f77f af72 	ble.w	8000658 <getKeyInput+0xc>
        	}
        }
    }
  }
}
}
 8000774:	bf00      	nop
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	2000000c 	.word	0x2000000c
 8000784:	20000018 	.word	0x20000018
 8000788:	20000000 	.word	0x20000000
 800078c:	40010c00 	.word	0x40010c00
 8000790:	20000024 	.word	0x20000024
 8000794:	20000030 	.word	0x20000030
 8000798:	20000084 	.word	0x20000084

0800079c <fsm_auto_run>:
 */

#include"fsm_auto.h"


void fsm_auto_run() {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	switch (status) {
 80007a0:	4ba5      	ldr	r3, [pc, #660]	; (8000a38 <fsm_auto_run+0x29c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	f200 8240 	bhi.w	8000c2a <fsm_auto_run+0x48e>
 80007aa:	a201      	add	r2, pc, #4	; (adr r2, 80007b0 <fsm_auto_run+0x14>)
 80007ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b0:	080007c5 	.word	0x080007c5
 80007b4:	08000a79 	.word	0x08000a79
 80007b8:	08000b53 	.word	0x08000b53
 80007bc:	08000885 	.word	0x08000885
 80007c0:	0800095f 	.word	0x0800095f
	case INIT:
		//TODO INIT
		if (1) {
			status = GREEN_RED;
 80007c4:	4b9c      	ldr	r3, [pc, #624]	; (8000a38 <fsm_auto_run+0x29c>)
 80007c6:	2203      	movs	r2, #3
 80007c8:	601a      	str	r2, [r3, #0]

			red_time1 = green_time1 + amber_time1;
 80007ca:	4b9c      	ldr	r3, [pc, #624]	; (8000a3c <fsm_auto_run+0x2a0>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	4b9c      	ldr	r3, [pc, #624]	; (8000a40 <fsm_auto_run+0x2a4>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	4a9b      	ldr	r2, [pc, #620]	; (8000a44 <fsm_auto_run+0x2a8>)
 80007d6:	6013      	str	r3, [r2, #0]
			red_time2 = green_time2 + amber_time2;
 80007d8:	4b9b      	ldr	r3, [pc, #620]	; (8000a48 <fsm_auto_run+0x2ac>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b9b      	ldr	r3, [pc, #620]	; (8000a4c <fsm_auto_run+0x2b0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4413      	add	r3, r2
 80007e2:	4a9b      	ldr	r2, [pc, #620]	; (8000a50 <fsm_auto_run+0x2b4>)
 80007e4:	6013      	str	r3, [r2, #0]

			local_green_time1 = green_time1/1000;
 80007e6:	4b95      	ldr	r3, [pc, #596]	; (8000a3c <fsm_auto_run+0x2a0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a9a      	ldr	r2, [pc, #616]	; (8000a54 <fsm_auto_run+0x2b8>)
 80007ec:	fb82 1203 	smull	r1, r2, r2, r3
 80007f0:	1192      	asrs	r2, r2, #6
 80007f2:	17db      	asrs	r3, r3, #31
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	4a98      	ldr	r2, [pc, #608]	; (8000a58 <fsm_auto_run+0x2bc>)
 80007f8:	6013      	str	r3, [r2, #0]
			local_red_time1 = red_time1/1000;
 80007fa:	4b92      	ldr	r3, [pc, #584]	; (8000a44 <fsm_auto_run+0x2a8>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a95      	ldr	r2, [pc, #596]	; (8000a54 <fsm_auto_run+0x2b8>)
 8000800:	fb82 1203 	smull	r1, r2, r2, r3
 8000804:	1192      	asrs	r2, r2, #6
 8000806:	17db      	asrs	r3, r3, #31
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	4a94      	ldr	r2, [pc, #592]	; (8000a5c <fsm_auto_run+0x2c0>)
 800080c:	6013      	str	r3, [r2, #0]
			local_amber_time1 = amber_time1/1000;
 800080e:	4b8c      	ldr	r3, [pc, #560]	; (8000a40 <fsm_auto_run+0x2a4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a90      	ldr	r2, [pc, #576]	; (8000a54 <fsm_auto_run+0x2b8>)
 8000814:	fb82 1203 	smull	r1, r2, r2, r3
 8000818:	1192      	asrs	r2, r2, #6
 800081a:	17db      	asrs	r3, r3, #31
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	4a90      	ldr	r2, [pc, #576]	; (8000a60 <fsm_auto_run+0x2c4>)
 8000820:	6013      	str	r3, [r2, #0]

			local_green_time2 = green_time2/1000;
 8000822:	4b89      	ldr	r3, [pc, #548]	; (8000a48 <fsm_auto_run+0x2ac>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a8b      	ldr	r2, [pc, #556]	; (8000a54 <fsm_auto_run+0x2b8>)
 8000828:	fb82 1203 	smull	r1, r2, r2, r3
 800082c:	1192      	asrs	r2, r2, #6
 800082e:	17db      	asrs	r3, r3, #31
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	4a8c      	ldr	r2, [pc, #560]	; (8000a64 <fsm_auto_run+0x2c8>)
 8000834:	6013      	str	r3, [r2, #0]
			local_red_time2 = red_time2/1000;
 8000836:	4b86      	ldr	r3, [pc, #536]	; (8000a50 <fsm_auto_run+0x2b4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a86      	ldr	r2, [pc, #536]	; (8000a54 <fsm_auto_run+0x2b8>)
 800083c:	fb82 1203 	smull	r1, r2, r2, r3
 8000840:	1192      	asrs	r2, r2, #6
 8000842:	17db      	asrs	r3, r3, #31
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	4a88      	ldr	r2, [pc, #544]	; (8000a68 <fsm_auto_run+0x2cc>)
 8000848:	6013      	str	r3, [r2, #0]
			local_amber_time2 = amber_time2/1000;
 800084a:	4b80      	ldr	r3, [pc, #512]	; (8000a4c <fsm_auto_run+0x2b0>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a81      	ldr	r2, [pc, #516]	; (8000a54 <fsm_auto_run+0x2b8>)
 8000850:	fb82 1203 	smull	r1, r2, r2, r3
 8000854:	1192      	asrs	r2, r2, #6
 8000856:	17db      	asrs	r3, r3, #31
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	4a84      	ldr	r2, [pc, #528]	; (8000a6c <fsm_auto_run+0x2d0>)
 800085c:	6013      	str	r3, [r2, #0]

			button_flag[0] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai GREEN_RED button=0 (vi GREEN_RED co doi nut nhan)
 800085e:	4b84      	ldr	r3, [pc, #528]	; (8000a70 <fsm_auto_run+0x2d4>)
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]

			setTimer(0, green_time1);
 8000864:	4b75      	ldr	r3, [pc, #468]	; (8000a3c <fsm_auto_run+0x2a0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	2000      	movs	r0, #0
 800086c:	f000 ffbe 	bl	80017ec <setTimer>
			setTimer(2, 10);
 8000870:	210a      	movs	r1, #10
 8000872:	2002      	movs	r0, #2
 8000874:	f000 ffba 	bl	80017ec <setTimer>
			setTimer(3, 1000);
 8000878:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800087c:	2003      	movs	r0, #3
 800087e:	f000 ffb5 	bl	80017ec <setTimer>
		}
		break;
 8000882:	e1db      	b.n	8000c3c <fsm_auto_run+0x4a0>
	case GREEN_RED:
		led_green_red();
 8000884:	f000 fdd4 	bl	8001430 <led_green_red>
		if (checkTimer(3) == 1) {
 8000888:	2003      	movs	r0, #3
 800088a:	f000 fffd 	bl	8001888 <checkTimer>
 800088e:	4603      	mov	r3, r0
 8000890:	2b01      	cmp	r3, #1
 8000892:	d12a      	bne.n	80008ea <fsm_auto_run+0x14e>
			local_green_time1--;
 8000894:	4b70      	ldr	r3, [pc, #448]	; (8000a58 <fsm_auto_run+0x2bc>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	3b01      	subs	r3, #1
 800089a:	4a6f      	ldr	r2, [pc, #444]	; (8000a58 <fsm_auto_run+0x2bc>)
 800089c:	6013      	str	r3, [r2, #0]
			local_red_time1--;
 800089e:	4b6f      	ldr	r3, [pc, #444]	; (8000a5c <fsm_auto_run+0x2c0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	4a6d      	ldr	r2, [pc, #436]	; (8000a5c <fsm_auto_run+0x2c0>)
 80008a6:	6013      	str	r3, [r2, #0]
			if(local_green_time1 <= 0) local_green_time1 = green_time1/1000;
 80008a8:	4b6b      	ldr	r3, [pc, #428]	; (8000a58 <fsm_auto_run+0x2bc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	dc09      	bgt.n	80008c4 <fsm_auto_run+0x128>
 80008b0:	4b62      	ldr	r3, [pc, #392]	; (8000a3c <fsm_auto_run+0x2a0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a67      	ldr	r2, [pc, #412]	; (8000a54 <fsm_auto_run+0x2b8>)
 80008b6:	fb82 1203 	smull	r1, r2, r2, r3
 80008ba:	1192      	asrs	r2, r2, #6
 80008bc:	17db      	asrs	r3, r3, #31
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	4a65      	ldr	r2, [pc, #404]	; (8000a58 <fsm_auto_run+0x2bc>)
 80008c2:	6013      	str	r3, [r2, #0]
			if(local_red_time1 <= 0) local_red_time1 = red_time1/1000;
 80008c4:	4b65      	ldr	r3, [pc, #404]	; (8000a5c <fsm_auto_run+0x2c0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	dc09      	bgt.n	80008e0 <fsm_auto_run+0x144>
 80008cc:	4b5d      	ldr	r3, [pc, #372]	; (8000a44 <fsm_auto_run+0x2a8>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a60      	ldr	r2, [pc, #384]	; (8000a54 <fsm_auto_run+0x2b8>)
 80008d2:	fb82 1203 	smull	r1, r2, r2, r3
 80008d6:	1192      	asrs	r2, r2, #6
 80008d8:	17db      	asrs	r3, r3, #31
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	4a5f      	ldr	r2, [pc, #380]	; (8000a5c <fsm_auto_run+0x2c0>)
 80008de:	6013      	str	r3, [r2, #0]
			setTimer(3, 1000);
 80008e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008e4:	2003      	movs	r0, #3
 80008e6:	f000 ff81 	bl	80017ec <setTimer>
		}
		if (checkTimer(2) == 1) {
 80008ea:	2002      	movs	r0, #2
 80008ec:	f000 ffcc 	bl	8001888 <checkTimer>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d10b      	bne.n	800090e <fsm_auto_run+0x172>
			//Update Display;
			update7segBuffer(local_green_time1, local_red_time1);
 80008f6:	4b58      	ldr	r3, [pc, #352]	; (8000a58 <fsm_auto_run+0x2bc>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a58      	ldr	r2, [pc, #352]	; (8000a5c <fsm_auto_run+0x2c0>)
 80008fc:	6812      	ldr	r2, [r2, #0]
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fe27 	bl	8000554 <update7segBuffer>
			setTimer(2, 250);
 8000906:	21fa      	movs	r1, #250	; 0xfa
 8000908:	2002      	movs	r0, #2
 800090a:	f000 ff6f 	bl	80017ec <setTimer>
		}
		if (checkTimer(0) == 1) {
 800090e:	2000      	movs	r0, #0
 8000910:	f000 ffba 	bl	8001888 <checkTimer>
 8000914:	4603      	mov	r3, r0
 8000916:	2b01      	cmp	r3, #1
 8000918:	d108      	bne.n	800092c <fsm_auto_run+0x190>
			status = AMBER_RED;
 800091a:	4b47      	ldr	r3, [pc, #284]	; (8000a38 <fsm_auto_run+0x29c>)
 800091c:	2204      	movs	r2, #4
 800091e:	601a      	str	r2, [r3, #0]
			setTimer(0, amber_time1);
 8000920:	4b47      	ldr	r3, [pc, #284]	; (8000a40 <fsm_auto_run+0x2a4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	2000      	movs	r0, #0
 8000928:	f000 ff60 	bl	80017ec <setTimer>
		}

		if(button_flag[0]==1){
 800092c:	4b50      	ldr	r3, [pc, #320]	; (8000a70 <fsm_auto_run+0x2d4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b01      	cmp	r3, #1
 8000932:	f040 817c 	bne.w	8000c2e <fsm_auto_run+0x492>
		status = MAN_GREEN_RED;
 8000936:	4b40      	ldr	r3, [pc, #256]	; (8000a38 <fsm_auto_run+0x29c>)
 8000938:	220d      	movs	r2, #13
 800093a:	601a      	str	r2, [r3, #0]
		setTimer(1,10000);
 800093c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000940:	2001      	movs	r0, #1
 8000942:	f000 ff53 	bl	80017ec <setTimer>
		setTimer(2,10);
 8000946:	210a      	movs	r1, #10
 8000948:	2002      	movs	r0, #2
 800094a:	f000 ff4f 	bl	80017ec <setTimer>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800094e:	2101      	movs	r1, #1
 8000950:	4848      	ldr	r0, [pc, #288]	; (8000a74 <fsm_auto_run+0x2d8>)
 8000952:	f001 fae8 	bl	8001f26 <HAL_GPIO_TogglePin>
		button_flag[0] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai tiep theo button=0
 8000956:	4b46      	ldr	r3, [pc, #280]	; (8000a70 <fsm_auto_run+0x2d4>)
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
		}
		break;
 800095c:	e167      	b.n	8000c2e <fsm_auto_run+0x492>
	case AMBER_RED:
		led_amber_red();
 800095e:	f000 fd77 	bl	8001450 <led_amber_red>
		if (checkTimer(0) == 1) {
 8000962:	2000      	movs	r0, #0
 8000964:	f000 ff90 	bl	8001888 <checkTimer>
 8000968:	4603      	mov	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	d108      	bne.n	8000980 <fsm_auto_run+0x1e4>
			status = RED_GREEN;
 800096e:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <fsm_auto_run+0x29c>)
 8000970:	2201      	movs	r2, #1
 8000972:	601a      	str	r2, [r3, #0]
			setTimer(0, green_time2);
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <fsm_auto_run+0x2ac>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	2000      	movs	r0, #0
 800097c:	f000 ff36 	bl	80017ec <setTimer>
		}
		if (checkTimer(3) == 1) {
 8000980:	2003      	movs	r0, #3
 8000982:	f000 ff81 	bl	8001888 <checkTimer>
 8000986:	4603      	mov	r3, r0
 8000988:	2b01      	cmp	r3, #1
 800098a:	d12a      	bne.n	80009e2 <fsm_auto_run+0x246>
			local_amber_time1--;
 800098c:	4b34      	ldr	r3, [pc, #208]	; (8000a60 <fsm_auto_run+0x2c4>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3b01      	subs	r3, #1
 8000992:	4a33      	ldr	r2, [pc, #204]	; (8000a60 <fsm_auto_run+0x2c4>)
 8000994:	6013      	str	r3, [r2, #0]
			local_red_time1--;
 8000996:	4b31      	ldr	r3, [pc, #196]	; (8000a5c <fsm_auto_run+0x2c0>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	3b01      	subs	r3, #1
 800099c:	4a2f      	ldr	r2, [pc, #188]	; (8000a5c <fsm_auto_run+0x2c0>)
 800099e:	6013      	str	r3, [r2, #0]
			if(local_amber_time1 <= 0) local_amber_time1 = amber_time1/1000;
 80009a0:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <fsm_auto_run+0x2c4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	dc09      	bgt.n	80009bc <fsm_auto_run+0x220>
 80009a8:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <fsm_auto_run+0x2a4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a29      	ldr	r2, [pc, #164]	; (8000a54 <fsm_auto_run+0x2b8>)
 80009ae:	fb82 1203 	smull	r1, r2, r2, r3
 80009b2:	1192      	asrs	r2, r2, #6
 80009b4:	17db      	asrs	r3, r3, #31
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	4a29      	ldr	r2, [pc, #164]	; (8000a60 <fsm_auto_run+0x2c4>)
 80009ba:	6013      	str	r3, [r2, #0]
			if(local_red_time1 <= 0) local_red_time1 = red_time1/1000;
 80009bc:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <fsm_auto_run+0x2c0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	dc09      	bgt.n	80009d8 <fsm_auto_run+0x23c>
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <fsm_auto_run+0x2a8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <fsm_auto_run+0x2b8>)
 80009ca:	fb82 1203 	smull	r1, r2, r2, r3
 80009ce:	1192      	asrs	r2, r2, #6
 80009d0:	17db      	asrs	r3, r3, #31
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	4a21      	ldr	r2, [pc, #132]	; (8000a5c <fsm_auto_run+0x2c0>)
 80009d6:	6013      	str	r3, [r2, #0]
			setTimer(3, 1000);
 80009d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 ff05 	bl	80017ec <setTimer>
		}
		if (checkTimer(2) == 1) {
 80009e2:	2002      	movs	r0, #2
 80009e4:	f000 ff50 	bl	8001888 <checkTimer>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d10b      	bne.n	8000a06 <fsm_auto_run+0x26a>
			//Update Display;
			update7segBuffer(local_amber_time1 , local_red_time1);
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <fsm_auto_run+0x2c4>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a1a      	ldr	r2, [pc, #104]	; (8000a5c <fsm_auto_run+0x2c0>)
 80009f4:	6812      	ldr	r2, [r2, #0]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fdab 	bl	8000554 <update7segBuffer>
			setTimer(2, 250);
 80009fe:	21fa      	movs	r1, #250	; 0xfa
 8000a00:	2002      	movs	r0, #2
 8000a02:	f000 fef3 	bl	80017ec <setTimer>
		}

		if(button_flag[0]==1){
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <fsm_auto_run+0x2d4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	f040 8111 	bne.w	8000c32 <fsm_auto_run+0x496>
				status = MAN_GREEN_RED;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <fsm_auto_run+0x29c>)
 8000a12:	220d      	movs	r2, #13
 8000a14:	601a      	str	r2, [r3, #0]
				setTimer(1,10000);
 8000a16:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f000 fee6 	bl	80017ec <setTimer>
				setTimer(2,10);
 8000a20:	210a      	movs	r1, #10
 8000a22:	2002      	movs	r0, #2
 8000a24:	f000 fee2 	bl	80017ec <setTimer>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000a28:	2101      	movs	r1, #1
 8000a2a:	4812      	ldr	r0, [pc, #72]	; (8000a74 <fsm_auto_run+0x2d8>)
 8000a2c:	f001 fa7b 	bl	8001f26 <HAL_GPIO_TogglePin>
				button_flag[0] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai tiep theo button=0
 8000a30:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <fsm_auto_run+0x2d4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
				}

		break;
 8000a36:	e0fc      	b.n	8000c32 <fsm_auto_run+0x496>
 8000a38:	20000090 	.word	0x20000090
 8000a3c:	20000038 	.word	0x20000038
 8000a40:	20000034 	.word	0x20000034
 8000a44:	200000ec 	.word	0x200000ec
 8000a48:	20000040 	.word	0x20000040
 8000a4c:	2000003c 	.word	0x2000003c
 8000a50:	200000f0 	.word	0x200000f0
 8000a54:	10624dd3 	.word	0x10624dd3
 8000a58:	200000e4 	.word	0x200000e4
 8000a5c:	20000100 	.word	0x20000100
 8000a60:	200000f8 	.word	0x200000f8
 8000a64:	200000fc 	.word	0x200000fc
 8000a68:	200000e8 	.word	0x200000e8
 8000a6c:	200000f4 	.word	0x200000f4
 8000a70:	20000084 	.word	0x20000084
 8000a74:	40010c00 	.word	0x40010c00
	case RED_GREEN:
		led_red_green();
 8000a78:	f000 fcfa 	bl	8001470 <led_red_green>
		if (checkTimer(0) == 1) {
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f000 ff03 	bl	8001888 <checkTimer>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d108      	bne.n	8000a9a <fsm_auto_run+0x2fe>
			status = RED_AMBER;
 8000a88:	4b6d      	ldr	r3, [pc, #436]	; (8000c40 <fsm_auto_run+0x4a4>)
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	601a      	str	r2, [r3, #0]
			setTimer(0, amber_time2);
 8000a8e:	4b6d      	ldr	r3, [pc, #436]	; (8000c44 <fsm_auto_run+0x4a8>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4619      	mov	r1, r3
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 fea9 	bl	80017ec <setTimer>
		}
		if (checkTimer(3) == 1) {
 8000a9a:	2003      	movs	r0, #3
 8000a9c:	f000 fef4 	bl	8001888 <checkTimer>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d12a      	bne.n	8000afc <fsm_auto_run+0x360>
			local_green_time2--;
 8000aa6:	4b68      	ldr	r3, [pc, #416]	; (8000c48 <fsm_auto_run+0x4ac>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	4a66      	ldr	r2, [pc, #408]	; (8000c48 <fsm_auto_run+0x4ac>)
 8000aae:	6013      	str	r3, [r2, #0]
			local_red_time2--;
 8000ab0:	4b66      	ldr	r3, [pc, #408]	; (8000c4c <fsm_auto_run+0x4b0>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3b01      	subs	r3, #1
 8000ab6:	4a65      	ldr	r2, [pc, #404]	; (8000c4c <fsm_auto_run+0x4b0>)
 8000ab8:	6013      	str	r3, [r2, #0]
			if(local_green_time2 <= 0) local_green_time2 = green_time2/1000;
 8000aba:	4b63      	ldr	r3, [pc, #396]	; (8000c48 <fsm_auto_run+0x4ac>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	dc09      	bgt.n	8000ad6 <fsm_auto_run+0x33a>
 8000ac2:	4b63      	ldr	r3, [pc, #396]	; (8000c50 <fsm_auto_run+0x4b4>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a63      	ldr	r2, [pc, #396]	; (8000c54 <fsm_auto_run+0x4b8>)
 8000ac8:	fb82 1203 	smull	r1, r2, r2, r3
 8000acc:	1192      	asrs	r2, r2, #6
 8000ace:	17db      	asrs	r3, r3, #31
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	4a5d      	ldr	r2, [pc, #372]	; (8000c48 <fsm_auto_run+0x4ac>)
 8000ad4:	6013      	str	r3, [r2, #0]
			if(local_red_time2 <= 0) local_red_time2 = red_time2/1000;
 8000ad6:	4b5d      	ldr	r3, [pc, #372]	; (8000c4c <fsm_auto_run+0x4b0>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	dc09      	bgt.n	8000af2 <fsm_auto_run+0x356>
 8000ade:	4b5e      	ldr	r3, [pc, #376]	; (8000c58 <fsm_auto_run+0x4bc>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a5c      	ldr	r2, [pc, #368]	; (8000c54 <fsm_auto_run+0x4b8>)
 8000ae4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae8:	1192      	asrs	r2, r2, #6
 8000aea:	17db      	asrs	r3, r3, #31
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	4a57      	ldr	r2, [pc, #348]	; (8000c4c <fsm_auto_run+0x4b0>)
 8000af0:	6013      	str	r3, [r2, #0]
			setTimer(3, 1000);
 8000af2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000af6:	2003      	movs	r0, #3
 8000af8:	f000 fe78 	bl	80017ec <setTimer>
		}
		if (checkTimer(2) == 1) {
 8000afc:	2002      	movs	r0, #2
 8000afe:	f000 fec3 	bl	8001888 <checkTimer>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d10b      	bne.n	8000b20 <fsm_auto_run+0x384>
			//Update Display;
			update7segBuffer(local_red_time2, local_green_time2);
 8000b08:	4b50      	ldr	r3, [pc, #320]	; (8000c4c <fsm_auto_run+0x4b0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a4e      	ldr	r2, [pc, #312]	; (8000c48 <fsm_auto_run+0x4ac>)
 8000b0e:	6812      	ldr	r2, [r2, #0]
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fd1e 	bl	8000554 <update7segBuffer>
			setTimer(2, 250);
 8000b18:	21fa      	movs	r1, #250	; 0xfa
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f000 fe66 	bl	80017ec <setTimer>
		}

		if(button_flag[0]==1){
 8000b20:	4b4e      	ldr	r3, [pc, #312]	; (8000c5c <fsm_auto_run+0x4c0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	f040 8086 	bne.w	8000c36 <fsm_auto_run+0x49a>
				status = MAN_GREEN_RED;
 8000b2a:	4b45      	ldr	r3, [pc, #276]	; (8000c40 <fsm_auto_run+0x4a4>)
 8000b2c:	220d      	movs	r2, #13
 8000b2e:	601a      	str	r2, [r3, #0]
				setTimer(1,10000);
 8000b30:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b34:	2001      	movs	r0, #1
 8000b36:	f000 fe59 	bl	80017ec <setTimer>
				setTimer(2,10);
 8000b3a:	210a      	movs	r1, #10
 8000b3c:	2002      	movs	r0, #2
 8000b3e:	f000 fe55 	bl	80017ec <setTimer>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000b42:	2101      	movs	r1, #1
 8000b44:	4846      	ldr	r0, [pc, #280]	; (8000c60 <fsm_auto_run+0x4c4>)
 8000b46:	f001 f9ee 	bl	8001f26 <HAL_GPIO_TogglePin>
				button_flag[0] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai tiep theo button=0
 8000b4a:	4b44      	ldr	r3, [pc, #272]	; (8000c5c <fsm_auto_run+0x4c0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
				}
		break;
 8000b50:	e071      	b.n	8000c36 <fsm_auto_run+0x49a>
	case RED_AMBER:
		led_red_amber();
 8000b52:	f000 fc9d 	bl	8001490 <led_red_amber>
		if (checkTimer(0) == 1) {
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 fe96 	bl	8001888 <checkTimer>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d108      	bne.n	8000b74 <fsm_auto_run+0x3d8>
			status = GREEN_RED;
 8000b62:	4b37      	ldr	r3, [pc, #220]	; (8000c40 <fsm_auto_run+0x4a4>)
 8000b64:	2203      	movs	r2, #3
 8000b66:	601a      	str	r2, [r3, #0]
			setTimer(0, green_time1);
 8000b68:	4b3e      	ldr	r3, [pc, #248]	; (8000c64 <fsm_auto_run+0x4c8>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f000 fe3c 	bl	80017ec <setTimer>
		}
		if (checkTimer(3) == 1) {
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 fe87 	bl	8001888 <checkTimer>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d12a      	bne.n	8000bd6 <fsm_auto_run+0x43a>
			local_amber_time2--;
 8000b80:	4b39      	ldr	r3, [pc, #228]	; (8000c68 <fsm_auto_run+0x4cc>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	4a38      	ldr	r2, [pc, #224]	; (8000c68 <fsm_auto_run+0x4cc>)
 8000b88:	6013      	str	r3, [r2, #0]
			local_red_time2--;
 8000b8a:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <fsm_auto_run+0x4b0>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	4a2e      	ldr	r2, [pc, #184]	; (8000c4c <fsm_auto_run+0x4b0>)
 8000b92:	6013      	str	r3, [r2, #0]
			if(local_amber_time2 <= 0) local_amber_time2 = amber_time2/1000;
 8000b94:	4b34      	ldr	r3, [pc, #208]	; (8000c68 <fsm_auto_run+0x4cc>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	dc09      	bgt.n	8000bb0 <fsm_auto_run+0x414>
 8000b9c:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <fsm_auto_run+0x4a8>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a2c      	ldr	r2, [pc, #176]	; (8000c54 <fsm_auto_run+0x4b8>)
 8000ba2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba6:	1192      	asrs	r2, r2, #6
 8000ba8:	17db      	asrs	r3, r3, #31
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	4a2e      	ldr	r2, [pc, #184]	; (8000c68 <fsm_auto_run+0x4cc>)
 8000bae:	6013      	str	r3, [r2, #0]
			if(local_red_time2 <= 0) local_red_time2 = red_time2/1000;
 8000bb0:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <fsm_auto_run+0x4b0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	dc09      	bgt.n	8000bcc <fsm_auto_run+0x430>
 8000bb8:	4b27      	ldr	r3, [pc, #156]	; (8000c58 <fsm_auto_run+0x4bc>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a25      	ldr	r2, [pc, #148]	; (8000c54 <fsm_auto_run+0x4b8>)
 8000bbe:	fb82 1203 	smull	r1, r2, r2, r3
 8000bc2:	1192      	asrs	r2, r2, #6
 8000bc4:	17db      	asrs	r3, r3, #31
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	4a20      	ldr	r2, [pc, #128]	; (8000c4c <fsm_auto_run+0x4b0>)
 8000bca:	6013      	str	r3, [r2, #0]
			setTimer(3, 1000);
 8000bcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 fe0b 	bl	80017ec <setTimer>
		}
		if (checkTimer(2) == 1) {
 8000bd6:	2002      	movs	r0, #2
 8000bd8:	f000 fe56 	bl	8001888 <checkTimer>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d10b      	bne.n	8000bfa <fsm_auto_run+0x45e>
			//Update Display;
			update7segBuffer(local_red_time2, local_amber_time2);
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <fsm_auto_run+0x4b0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a20      	ldr	r2, [pc, #128]	; (8000c68 <fsm_auto_run+0x4cc>)
 8000be8:	6812      	ldr	r2, [r2, #0]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fcb1 	bl	8000554 <update7segBuffer>
			setTimer(2, 250);
 8000bf2:	21fa      	movs	r1, #250	; 0xfa
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f000 fdf9 	bl	80017ec <setTimer>
		}

		if(button_flag[0]==1){
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <fsm_auto_run+0x4c0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d11b      	bne.n	8000c3a <fsm_auto_run+0x49e>
				status = MAN_GREEN_RED;
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <fsm_auto_run+0x4a4>)
 8000c04:	220d      	movs	r2, #13
 8000c06:	601a      	str	r2, [r3, #0]
				setTimer(1,10000);
 8000c08:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 fded 	bl	80017ec <setTimer>
				setTimer(2,10);
 8000c12:	210a      	movs	r1, #10
 8000c14:	2002      	movs	r0, #2
 8000c16:	f000 fde9 	bl	80017ec <setTimer>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	4810      	ldr	r0, [pc, #64]	; (8000c60 <fsm_auto_run+0x4c4>)
 8000c1e:	f001 f982 	bl	8001f26 <HAL_GPIO_TogglePin>
				button_flag[0] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai tiep theo button=0
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <fsm_auto_run+0x4c0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
				}
		break;
 8000c28:	e007      	b.n	8000c3a <fsm_auto_run+0x49e>
	default:
		break;
 8000c2a:	bf00      	nop
 8000c2c:	e006      	b.n	8000c3c <fsm_auto_run+0x4a0>
		break;
 8000c2e:	bf00      	nop
 8000c30:	e004      	b.n	8000c3c <fsm_auto_run+0x4a0>
		break;
 8000c32:	bf00      	nop
 8000c34:	e002      	b.n	8000c3c <fsm_auto_run+0x4a0>
		break;
 8000c36:	bf00      	nop
 8000c38:	e000      	b.n	8000c3c <fsm_auto_run+0x4a0>
		break;
 8000c3a:	bf00      	nop
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000090 	.word	0x20000090
 8000c44:	2000003c 	.word	0x2000003c
 8000c48:	200000fc 	.word	0x200000fc
 8000c4c:	200000e8 	.word	0x200000e8
 8000c50:	20000040 	.word	0x20000040
 8000c54:	10624dd3 	.word	0x10624dd3
 8000c58:	200000f0 	.word	0x200000f0
 8000c5c:	20000084 	.word	0x20000084
 8000c60:	40010c00 	.word	0x40010c00
 8000c64:	20000038 	.word	0x20000038
 8000c68:	200000f4 	.word	0x200000f4

08000c6c <fsm_man_run>:
#include "fsm_manual.h"

void init_fsm_man() {
}
void fsm_man_run() {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	switch (status) {
 8000c70:	4b74      	ldr	r3, [pc, #464]	; (8000e44 <fsm_man_run+0x1d8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3b0b      	subs	r3, #11
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	f200 83b2 	bhi.w	80013e0 <fsm_man_run+0x774>
 8000c7c:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <fsm_man_run+0x18>)
 8000c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c82:	bf00      	nop
 8000c84:	0800104d 	.word	0x0800104d
 8000c88:	08001235 	.word	0x08001235
 8000c8c:	08000c95 	.word	0x08000c95
 8000c90:	08000e71 	.word	0x08000e71
	case MAN_GREEN_RED:
		led_green_red();
 8000c94:	f000 fbcc 	bl	8001430 <led_green_red>
		if (button_flag[0] == 1) {
 8000c98:	4b6b      	ldr	r3, [pc, #428]	; (8000e48 <fsm_man_run+0x1dc>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d10e      	bne.n	8000cbe <fsm_man_run+0x52>
			status = MAN_AMBER_RED;
 8000ca0:	4b68      	ldr	r3, [pc, #416]	; (8000e44 <fsm_man_run+0x1d8>)
 8000ca2:	220e      	movs	r2, #14
 8000ca4:	601a      	str	r2, [r3, #0]
			setTimer(1, 10000);
 8000ca6:	f242 7110 	movw	r1, #10000	; 0x2710
 8000caa:	2001      	movs	r0, #1
 8000cac:	f000 fd9e 	bl	80017ec <setTimer>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	4866      	ldr	r0, [pc, #408]	; (8000e4c <fsm_man_run+0x1e0>)
 8000cb4:	f001 f937 	bl	8001f26 <HAL_GPIO_TogglePin>
			button_flag[0] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai tiep theo button=0
 8000cb8:	4b63      	ldr	r3, [pc, #396]	; (8000e48 <fsm_man_run+0x1dc>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
		}
		if (button_flag[1] == 1) {
 8000cbe:	4b62      	ldr	r3, [pc, #392]	; (8000e48 <fsm_man_run+0x1dc>)
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d127      	bne.n	8000d16 <fsm_man_run+0xaa>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	4860      	ldr	r0, [pc, #384]	; (8000e4c <fsm_man_run+0x1e0>)
 8000cca:	f001 f92c 	bl	8001f26 <HAL_GPIO_TogglePin>
			green_time1 += 1000;
 8000cce:	4b60      	ldr	r3, [pc, #384]	; (8000e50 <fsm_man_run+0x1e4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000cd6:	4a5e      	ldr	r2, [pc, #376]	; (8000e50 <fsm_man_run+0x1e4>)
 8000cd8:	6013      	str	r3, [r2, #0]
			red_time1 += 1000;
 8000cda:	4b5e      	ldr	r3, [pc, #376]	; (8000e54 <fsm_man_run+0x1e8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000ce2:	4a5c      	ldr	r2, [pc, #368]	; (8000e54 <fsm_man_run+0x1e8>)
 8000ce4:	6013      	str	r3, [r2, #0]
			if (red_time1 >= 100000) {
 8000ce6:	4b5b      	ldr	r3, [pc, #364]	; (8000e54 <fsm_man_run+0x1e8>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a5b      	ldr	r2, [pc, #364]	; (8000e58 <fsm_man_run+0x1ec>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	dd0a      	ble.n	8000d06 <fsm_man_run+0x9a>
				green_time1 = 1000;
 8000cf0:	4b57      	ldr	r3, [pc, #348]	; (8000e50 <fsm_man_run+0x1e4>)
 8000cf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cf6:	601a      	str	r2, [r3, #0]
				red_time1 = green_time1 + amber_time1;
 8000cf8:	4b55      	ldr	r3, [pc, #340]	; (8000e50 <fsm_man_run+0x1e4>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b57      	ldr	r3, [pc, #348]	; (8000e5c <fsm_man_run+0x1f0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4413      	add	r3, r2
 8000d02:	4a54      	ldr	r2, [pc, #336]	; (8000e54 <fsm_man_run+0x1e8>)
 8000d04:	6013      	str	r3, [r2, #0]
			}
			setTimer(1, 10000);
 8000d06:	f242 7110 	movw	r1, #10000	; 0x2710
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f000 fd6e 	bl	80017ec <setTimer>
			button_flag[1] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai tiep theo button=0
 8000d10:	4b4d      	ldr	r3, [pc, #308]	; (8000e48 <fsm_man_run+0x1dc>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
		}
		if (button_flag[2] == 1) {
 8000d16:	4b4c      	ldr	r3, [pc, #304]	; (8000e48 <fsm_man_run+0x1dc>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d139      	bne.n	8000d92 <fsm_man_run+0x126>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000d1e:	2104      	movs	r1, #4
 8000d20:	484a      	ldr	r0, [pc, #296]	; (8000e4c <fsm_man_run+0x1e0>)
 8000d22:	f001 f900 	bl	8001f26 <HAL_GPIO_TogglePin>
			status = GREEN_RED;
 8000d26:	4b47      	ldr	r3, [pc, #284]	; (8000e44 <fsm_man_run+0x1d8>)
 8000d28:	2203      	movs	r2, #3
 8000d2a:	601a      	str	r2, [r3, #0]
			local_green_time1 = green_time1 / 1000;
 8000d2c:	4b48      	ldr	r3, [pc, #288]	; (8000e50 <fsm_man_run+0x1e4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a4b      	ldr	r2, [pc, #300]	; (8000e60 <fsm_man_run+0x1f4>)
 8000d32:	fb82 1203 	smull	r1, r2, r2, r3
 8000d36:	1192      	asrs	r2, r2, #6
 8000d38:	17db      	asrs	r3, r3, #31
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	4a49      	ldr	r2, [pc, #292]	; (8000e64 <fsm_man_run+0x1f8>)
 8000d3e:	6013      	str	r3, [r2, #0]
			local_red_time1 = red_time1 / 1000;
 8000d40:	4b44      	ldr	r3, [pc, #272]	; (8000e54 <fsm_man_run+0x1e8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a46      	ldr	r2, [pc, #280]	; (8000e60 <fsm_man_run+0x1f4>)
 8000d46:	fb82 1203 	smull	r1, r2, r2, r3
 8000d4a:	1192      	asrs	r2, r2, #6
 8000d4c:	17db      	asrs	r3, r3, #31
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	4a45      	ldr	r2, [pc, #276]	; (8000e68 <fsm_man_run+0x1fc>)
 8000d52:	6013      	str	r3, [r2, #0]
			local_amber_time1 = amber_time1 / 1000;
 8000d54:	4b41      	ldr	r3, [pc, #260]	; (8000e5c <fsm_man_run+0x1f0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a41      	ldr	r2, [pc, #260]	; (8000e60 <fsm_man_run+0x1f4>)
 8000d5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5e:	1192      	asrs	r2, r2, #6
 8000d60:	17db      	asrs	r3, r3, #31
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	4a41      	ldr	r2, [pc, #260]	; (8000e6c <fsm_man_run+0x200>)
 8000d66:	6013      	str	r3, [r2, #0]
			setTimer(0, green_time1);
 8000d68:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <fsm_man_run+0x1e4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f000 fd3c 	bl	80017ec <setTimer>
			button_flag[0] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai GREEN_RED button=0 (vi GREEN_RED co doi nut nhan)
 8000d74:	4b34      	ldr	r3, [pc, #208]	; (8000e48 <fsm_man_run+0x1dc>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
			button_flag[2] = 0;
 8000d7a:	4b33      	ldr	r3, [pc, #204]	; (8000e48 <fsm_man_run+0x1dc>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
			setTimer(2, 10);
 8000d80:	210a      	movs	r1, #10
 8000d82:	2002      	movs	r0, #2
 8000d84:	f000 fd32 	bl	80017ec <setTimer>
			setTimer(3, 1000);
 8000d88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 fd2d 	bl	80017ec <setTimer>
		}
		if (checkTimer(2) == 1) {
 8000d92:	2002      	movs	r0, #2
 8000d94:	f000 fd78 	bl	8001888 <checkTimer>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d116      	bne.n	8000dcc <fsm_man_run+0x160>
			//Update Display;
			update7segBuffer(green_time1 / 1000, red_time1 / 1000);
 8000d9e:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <fsm_man_run+0x1e4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a2f      	ldr	r2, [pc, #188]	; (8000e60 <fsm_man_run+0x1f4>)
 8000da4:	fb82 1203 	smull	r1, r2, r2, r3
 8000da8:	1192      	asrs	r2, r2, #6
 8000daa:	17db      	asrs	r3, r3, #31
 8000dac:	1ad0      	subs	r0, r2, r3
 8000dae:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <fsm_man_run+0x1e8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a2b      	ldr	r2, [pc, #172]	; (8000e60 <fsm_man_run+0x1f4>)
 8000db4:	fb82 1203 	smull	r1, r2, r2, r3
 8000db8:	1192      	asrs	r2, r2, #6
 8000dba:	17db      	asrs	r3, r3, #31
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f7ff fbc8 	bl	8000554 <update7segBuffer>
			setTimer(2, 250);
 8000dc4:	21fa      	movs	r1, #250	; 0xfa
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	f000 fd10 	bl	80017ec <setTimer>
		}
		if (checkTimer(1) == 1) {
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f000 fd5b 	bl	8001888 <checkTimer>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	f040 8305 	bne.w	80013e4 <fsm_man_run+0x778>
			status = GREEN_RED;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <fsm_man_run+0x1d8>)
 8000ddc:	2203      	movs	r2, #3
 8000dde:	601a      	str	r2, [r3, #0]
			local_green_time1 = green_time1 / 1000;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <fsm_man_run+0x1e4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a1e      	ldr	r2, [pc, #120]	; (8000e60 <fsm_man_run+0x1f4>)
 8000de6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dea:	1192      	asrs	r2, r2, #6
 8000dec:	17db      	asrs	r3, r3, #31
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <fsm_man_run+0x1f8>)
 8000df2:	6013      	str	r3, [r2, #0]
			local_red_time1 = red_time1 / 1000;
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <fsm_man_run+0x1e8>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a19      	ldr	r2, [pc, #100]	; (8000e60 <fsm_man_run+0x1f4>)
 8000dfa:	fb82 1203 	smull	r1, r2, r2, r3
 8000dfe:	1192      	asrs	r2, r2, #6
 8000e00:	17db      	asrs	r3, r3, #31
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	4a18      	ldr	r2, [pc, #96]	; (8000e68 <fsm_man_run+0x1fc>)
 8000e06:	6013      	str	r3, [r2, #0]
			local_amber_time1 = amber_time1 / 1000;
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <fsm_man_run+0x1f0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <fsm_man_run+0x1f4>)
 8000e0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e12:	1192      	asrs	r2, r2, #6
 8000e14:	17db      	asrs	r3, r3, #31
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <fsm_man_run+0x200>)
 8000e1a:	6013      	str	r3, [r2, #0]
			setTimer(0, green_time1);
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <fsm_man_run+0x1e4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4619      	mov	r1, r3
 8000e22:	2000      	movs	r0, #0
 8000e24:	f000 fce2 	bl	80017ec <setTimer>
			button_flag[0] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai GREEN_RED button=0 (vi GREEN_RED co doi nut nhan)
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <fsm_man_run+0x1dc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
			setTimer(2, 10);
 8000e2e:	210a      	movs	r1, #10
 8000e30:	2002      	movs	r0, #2
 8000e32:	f000 fcdb 	bl	80017ec <setTimer>
			setTimer(3, 1000);
 8000e36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	f000 fcd6 	bl	80017ec <setTimer>
		}
		break;
 8000e40:	e2d0      	b.n	80013e4 <fsm_man_run+0x778>
 8000e42:	bf00      	nop
 8000e44:	20000090 	.word	0x20000090
 8000e48:	20000084 	.word	0x20000084
 8000e4c:	40010c00 	.word	0x40010c00
 8000e50:	20000038 	.word	0x20000038
 8000e54:	200000ec 	.word	0x200000ec
 8000e58:	0001869f 	.word	0x0001869f
 8000e5c:	20000034 	.word	0x20000034
 8000e60:	10624dd3 	.word	0x10624dd3
 8000e64:	200000e4 	.word	0x200000e4
 8000e68:	20000100 	.word	0x20000100
 8000e6c:	200000f8 	.word	0x200000f8
	case MAN_AMBER_RED:
		led_amber_red();
 8000e70:	f000 faee 	bl	8001450 <led_amber_red>
		if (button_flag[0] == 1) {
 8000e74:	4b6a      	ldr	r3, [pc, #424]	; (8001020 <fsm_man_run+0x3b4>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d10e      	bne.n	8000e9a <fsm_man_run+0x22e>
			status = MAN_RED_GREEN;
 8000e7c:	4b69      	ldr	r3, [pc, #420]	; (8001024 <fsm_man_run+0x3b8>)
 8000e7e:	220b      	movs	r2, #11
 8000e80:	601a      	str	r2, [r3, #0]
			setTimer(1, 10000);
 8000e82:	f242 7110 	movw	r1, #10000	; 0x2710
 8000e86:	2001      	movs	r0, #1
 8000e88:	f000 fcb0 	bl	80017ec <setTimer>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	4866      	ldr	r0, [pc, #408]	; (8001028 <fsm_man_run+0x3bc>)
 8000e90:	f001 f849 	bl	8001f26 <HAL_GPIO_TogglePin>
			button_flag[0] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai tiep theo button=0
 8000e94:	4b62      	ldr	r3, [pc, #392]	; (8001020 <fsm_man_run+0x3b4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
		}
		if (button_flag[1] == 1) {
 8000e9a:	4b61      	ldr	r3, [pc, #388]	; (8001020 <fsm_man_run+0x3b4>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d127      	bne.n	8000ef2 <fsm_man_run+0x286>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	4860      	ldr	r0, [pc, #384]	; (8001028 <fsm_man_run+0x3bc>)
 8000ea6:	f001 f83e 	bl	8001f26 <HAL_GPIO_TogglePin>
			amber_time1 += 1000;
 8000eaa:	4b60      	ldr	r3, [pc, #384]	; (800102c <fsm_man_run+0x3c0>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000eb2:	4a5e      	ldr	r2, [pc, #376]	; (800102c <fsm_man_run+0x3c0>)
 8000eb4:	6013      	str	r3, [r2, #0]
			red_time1 += 1000;
 8000eb6:	4b5e      	ldr	r3, [pc, #376]	; (8001030 <fsm_man_run+0x3c4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000ebe:	4a5c      	ldr	r2, [pc, #368]	; (8001030 <fsm_man_run+0x3c4>)
 8000ec0:	6013      	str	r3, [r2, #0]
			if (red_time1 >= 100000) {
 8000ec2:	4b5b      	ldr	r3, [pc, #364]	; (8001030 <fsm_man_run+0x3c4>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a5b      	ldr	r2, [pc, #364]	; (8001034 <fsm_man_run+0x3c8>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	dd0a      	ble.n	8000ee2 <fsm_man_run+0x276>
				amber_time1 = 1000;
 8000ecc:	4b57      	ldr	r3, [pc, #348]	; (800102c <fsm_man_run+0x3c0>)
 8000ece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ed2:	601a      	str	r2, [r3, #0]
				red_time1 = green_time1 + amber_time1;
 8000ed4:	4b58      	ldr	r3, [pc, #352]	; (8001038 <fsm_man_run+0x3cc>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b54      	ldr	r3, [pc, #336]	; (800102c <fsm_man_run+0x3c0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a54      	ldr	r2, [pc, #336]	; (8001030 <fsm_man_run+0x3c4>)
 8000ee0:	6013      	str	r3, [r2, #0]
			}
			setTimer(1, 10000);
 8000ee2:	f242 7110 	movw	r1, #10000	; 0x2710
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f000 fc80 	bl	80017ec <setTimer>
			button_flag[1] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai tiep theo button=0
 8000eec:	4b4c      	ldr	r3, [pc, #304]	; (8001020 <fsm_man_run+0x3b4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	605a      	str	r2, [r3, #4]
		}
		if (button_flag[2] == 1) {
 8000ef2:	4b4b      	ldr	r3, [pc, #300]	; (8001020 <fsm_man_run+0x3b4>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d139      	bne.n	8000f6e <fsm_man_run+0x302>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000efa:	2104      	movs	r1, #4
 8000efc:	484a      	ldr	r0, [pc, #296]	; (8001028 <fsm_man_run+0x3bc>)
 8000efe:	f001 f812 	bl	8001f26 <HAL_GPIO_TogglePin>
			status = GREEN_RED;
 8000f02:	4b48      	ldr	r3, [pc, #288]	; (8001024 <fsm_man_run+0x3b8>)
 8000f04:	2203      	movs	r2, #3
 8000f06:	601a      	str	r2, [r3, #0]
			local_green_time1 = green_time1 / 1000;
 8000f08:	4b4b      	ldr	r3, [pc, #300]	; (8001038 <fsm_man_run+0x3cc>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a4b      	ldr	r2, [pc, #300]	; (800103c <fsm_man_run+0x3d0>)
 8000f0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f12:	1192      	asrs	r2, r2, #6
 8000f14:	17db      	asrs	r3, r3, #31
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	4a49      	ldr	r2, [pc, #292]	; (8001040 <fsm_man_run+0x3d4>)
 8000f1a:	6013      	str	r3, [r2, #0]
			local_red_time1 = red_time1 / 1000;
 8000f1c:	4b44      	ldr	r3, [pc, #272]	; (8001030 <fsm_man_run+0x3c4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a46      	ldr	r2, [pc, #280]	; (800103c <fsm_man_run+0x3d0>)
 8000f22:	fb82 1203 	smull	r1, r2, r2, r3
 8000f26:	1192      	asrs	r2, r2, #6
 8000f28:	17db      	asrs	r3, r3, #31
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	4a45      	ldr	r2, [pc, #276]	; (8001044 <fsm_man_run+0x3d8>)
 8000f2e:	6013      	str	r3, [r2, #0]
			local_amber_time1 = amber_time1 / 1000;
 8000f30:	4b3e      	ldr	r3, [pc, #248]	; (800102c <fsm_man_run+0x3c0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a41      	ldr	r2, [pc, #260]	; (800103c <fsm_man_run+0x3d0>)
 8000f36:	fb82 1203 	smull	r1, r2, r2, r3
 8000f3a:	1192      	asrs	r2, r2, #6
 8000f3c:	17db      	asrs	r3, r3, #31
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	4a41      	ldr	r2, [pc, #260]	; (8001048 <fsm_man_run+0x3dc>)
 8000f42:	6013      	str	r3, [r2, #0]
			setTimer(0, green_time1);
 8000f44:	4b3c      	ldr	r3, [pc, #240]	; (8001038 <fsm_man_run+0x3cc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 fc4e 	bl	80017ec <setTimer>
			button_flag[0] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai GREEN_RED button=0 (vi GREEN_RED co doi nut nhan)
 8000f50:	4b33      	ldr	r3, [pc, #204]	; (8001020 <fsm_man_run+0x3b4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
			button_flag[2] = 0;
 8000f56:	4b32      	ldr	r3, [pc, #200]	; (8001020 <fsm_man_run+0x3b4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
			setTimer(2, 10);
 8000f5c:	210a      	movs	r1, #10
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f000 fc44 	bl	80017ec <setTimer>
			setTimer(3, 1000);
 8000f64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 fc3f 	bl	80017ec <setTimer>
		}
		if (checkTimer(2) == 1) {
 8000f6e:	2002      	movs	r0, #2
 8000f70:	f000 fc8a 	bl	8001888 <checkTimer>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d116      	bne.n	8000fa8 <fsm_man_run+0x33c>
			//Update Display;
			update7segBuffer(amber_time1 / 1000, red_time1 / 1000);
 8000f7a:	4b2c      	ldr	r3, [pc, #176]	; (800102c <fsm_man_run+0x3c0>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a2f      	ldr	r2, [pc, #188]	; (800103c <fsm_man_run+0x3d0>)
 8000f80:	fb82 1203 	smull	r1, r2, r2, r3
 8000f84:	1192      	asrs	r2, r2, #6
 8000f86:	17db      	asrs	r3, r3, #31
 8000f88:	1ad0      	subs	r0, r2, r3
 8000f8a:	4b29      	ldr	r3, [pc, #164]	; (8001030 <fsm_man_run+0x3c4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a2b      	ldr	r2, [pc, #172]	; (800103c <fsm_man_run+0x3d0>)
 8000f90:	fb82 1203 	smull	r1, r2, r2, r3
 8000f94:	1192      	asrs	r2, r2, #6
 8000f96:	17db      	asrs	r3, r3, #31
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fada 	bl	8000554 <update7segBuffer>
			setTimer(2, 250);
 8000fa0:	21fa      	movs	r1, #250	; 0xfa
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f000 fc22 	bl	80017ec <setTimer>
		}
		if (checkTimer(1) == 1) {
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f000 fc6d 	bl	8001888 <checkTimer>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	f040 8219 	bne.w	80013e8 <fsm_man_run+0x77c>
			status = GREEN_RED;
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <fsm_man_run+0x3b8>)
 8000fb8:	2203      	movs	r2, #3
 8000fba:	601a      	str	r2, [r3, #0]
			local_green_time1 = green_time1 / 1000;
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <fsm_man_run+0x3cc>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a1e      	ldr	r2, [pc, #120]	; (800103c <fsm_man_run+0x3d0>)
 8000fc2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc6:	1192      	asrs	r2, r2, #6
 8000fc8:	17db      	asrs	r3, r3, #31
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	4a1c      	ldr	r2, [pc, #112]	; (8001040 <fsm_man_run+0x3d4>)
 8000fce:	6013      	str	r3, [r2, #0]
			local_red_time1 = red_time1 / 1000;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <fsm_man_run+0x3c4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a19      	ldr	r2, [pc, #100]	; (800103c <fsm_man_run+0x3d0>)
 8000fd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fda:	1192      	asrs	r2, r2, #6
 8000fdc:	17db      	asrs	r3, r3, #31
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	4a18      	ldr	r2, [pc, #96]	; (8001044 <fsm_man_run+0x3d8>)
 8000fe2:	6013      	str	r3, [r2, #0]
			local_amber_time1 = amber_time1 / 1000;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <fsm_man_run+0x3c0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <fsm_man_run+0x3d0>)
 8000fea:	fb82 1203 	smull	r1, r2, r2, r3
 8000fee:	1192      	asrs	r2, r2, #6
 8000ff0:	17db      	asrs	r3, r3, #31
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	4a14      	ldr	r2, [pc, #80]	; (8001048 <fsm_man_run+0x3dc>)
 8000ff6:	6013      	str	r3, [r2, #0]
			setTimer(0, green_time1);
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <fsm_man_run+0x3cc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 fbf4 	bl	80017ec <setTimer>
			button_flag[0] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai GREEN_RED button=0 (vi GREEN_RED co doi nut nhan)
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <fsm_man_run+0x3b4>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
			setTimer(2, 10);
 800100a:	210a      	movs	r1, #10
 800100c:	2002      	movs	r0, #2
 800100e:	f000 fbed 	bl	80017ec <setTimer>
			setTimer(3, 1000);
 8001012:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001016:	2003      	movs	r0, #3
 8001018:	f000 fbe8 	bl	80017ec <setTimer>
		}
		break;
 800101c:	e1e4      	b.n	80013e8 <fsm_man_run+0x77c>
 800101e:	bf00      	nop
 8001020:	20000084 	.word	0x20000084
 8001024:	20000090 	.word	0x20000090
 8001028:	40010c00 	.word	0x40010c00
 800102c:	20000034 	.word	0x20000034
 8001030:	200000ec 	.word	0x200000ec
 8001034:	0001869f 	.word	0x0001869f
 8001038:	20000038 	.word	0x20000038
 800103c:	10624dd3 	.word	0x10624dd3
 8001040:	200000e4 	.word	0x200000e4
 8001044:	20000100 	.word	0x20000100
 8001048:	200000f8 	.word	0x200000f8
	case MAN_RED_GREEN:
		led_red_green();
 800104c:	f000 fa10 	bl	8001470 <led_red_green>
		if (button_flag[0] == 1) {
 8001050:	4b6a      	ldr	r3, [pc, #424]	; (80011fc <fsm_man_run+0x590>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d10e      	bne.n	8001076 <fsm_man_run+0x40a>
			status = MAN_RED_AMBER;
 8001058:	4b69      	ldr	r3, [pc, #420]	; (8001200 <fsm_man_run+0x594>)
 800105a:	220c      	movs	r2, #12
 800105c:	601a      	str	r2, [r3, #0]
			setTimer(1, 10000);
 800105e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001062:	2001      	movs	r0, #1
 8001064:	f000 fbc2 	bl	80017ec <setTimer>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001068:	2101      	movs	r1, #1
 800106a:	4866      	ldr	r0, [pc, #408]	; (8001204 <fsm_man_run+0x598>)
 800106c:	f000 ff5b 	bl	8001f26 <HAL_GPIO_TogglePin>
			button_flag[0] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai tiep theo button=0
 8001070:	4b62      	ldr	r3, [pc, #392]	; (80011fc <fsm_man_run+0x590>)
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
		}
		if (button_flag[1] == 1) {
 8001076:	4b61      	ldr	r3, [pc, #388]	; (80011fc <fsm_man_run+0x590>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d127      	bne.n	80010ce <fsm_man_run+0x462>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800107e:	2102      	movs	r1, #2
 8001080:	4860      	ldr	r0, [pc, #384]	; (8001204 <fsm_man_run+0x598>)
 8001082:	f000 ff50 	bl	8001f26 <HAL_GPIO_TogglePin>
			green_time2 += 1000;
 8001086:	4b60      	ldr	r3, [pc, #384]	; (8001208 <fsm_man_run+0x59c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800108e:	4a5e      	ldr	r2, [pc, #376]	; (8001208 <fsm_man_run+0x59c>)
 8001090:	6013      	str	r3, [r2, #0]
			red_time2 += 1000;
 8001092:	4b5e      	ldr	r3, [pc, #376]	; (800120c <fsm_man_run+0x5a0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800109a:	4a5c      	ldr	r2, [pc, #368]	; (800120c <fsm_man_run+0x5a0>)
 800109c:	6013      	str	r3, [r2, #0]
			if (red_time2 >= 100000) {
 800109e:	4b5b      	ldr	r3, [pc, #364]	; (800120c <fsm_man_run+0x5a0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a5b      	ldr	r2, [pc, #364]	; (8001210 <fsm_man_run+0x5a4>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	dd0a      	ble.n	80010be <fsm_man_run+0x452>
				green_time2 = 1000;
 80010a8:	4b57      	ldr	r3, [pc, #348]	; (8001208 <fsm_man_run+0x59c>)
 80010aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ae:	601a      	str	r2, [r3, #0]
				red_time2 = green_time2 + amber_time2;
 80010b0:	4b55      	ldr	r3, [pc, #340]	; (8001208 <fsm_man_run+0x59c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b57      	ldr	r3, [pc, #348]	; (8001214 <fsm_man_run+0x5a8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a54      	ldr	r2, [pc, #336]	; (800120c <fsm_man_run+0x5a0>)
 80010bc:	6013      	str	r3, [r2, #0]
			}
			setTimer(1, 10000);
 80010be:	f242 7110 	movw	r1, #10000	; 0x2710
 80010c2:	2001      	movs	r0, #1
 80010c4:	f000 fb92 	bl	80017ec <setTimer>
			button_flag[1] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai tiep theo button=0
 80010c8:	4b4c      	ldr	r3, [pc, #304]	; (80011fc <fsm_man_run+0x590>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	605a      	str	r2, [r3, #4]
		}
		if (button_flag[2] == 1) {
 80010ce:	4b4b      	ldr	r3, [pc, #300]	; (80011fc <fsm_man_run+0x590>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d139      	bne.n	800114a <fsm_man_run+0x4de>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80010d6:	2104      	movs	r1, #4
 80010d8:	484a      	ldr	r0, [pc, #296]	; (8001204 <fsm_man_run+0x598>)
 80010da:	f000 ff24 	bl	8001f26 <HAL_GPIO_TogglePin>
			status = GREEN_RED;
 80010de:	4b48      	ldr	r3, [pc, #288]	; (8001200 <fsm_man_run+0x594>)
 80010e0:	2203      	movs	r2, #3
 80010e2:	601a      	str	r2, [r3, #0]
			local_green_time1 = green_time1 / 1000;
 80010e4:	4b4c      	ldr	r3, [pc, #304]	; (8001218 <fsm_man_run+0x5ac>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a4c      	ldr	r2, [pc, #304]	; (800121c <fsm_man_run+0x5b0>)
 80010ea:	fb82 1203 	smull	r1, r2, r2, r3
 80010ee:	1192      	asrs	r2, r2, #6
 80010f0:	17db      	asrs	r3, r3, #31
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	4a4a      	ldr	r2, [pc, #296]	; (8001220 <fsm_man_run+0x5b4>)
 80010f6:	6013      	str	r3, [r2, #0]
			local_red_time1 = red_time1 / 1000;
 80010f8:	4b4a      	ldr	r3, [pc, #296]	; (8001224 <fsm_man_run+0x5b8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a47      	ldr	r2, [pc, #284]	; (800121c <fsm_man_run+0x5b0>)
 80010fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001102:	1192      	asrs	r2, r2, #6
 8001104:	17db      	asrs	r3, r3, #31
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	4a47      	ldr	r2, [pc, #284]	; (8001228 <fsm_man_run+0x5bc>)
 800110a:	6013      	str	r3, [r2, #0]
			local_amber_time1 = amber_time1 / 1000;
 800110c:	4b47      	ldr	r3, [pc, #284]	; (800122c <fsm_man_run+0x5c0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a42      	ldr	r2, [pc, #264]	; (800121c <fsm_man_run+0x5b0>)
 8001112:	fb82 1203 	smull	r1, r2, r2, r3
 8001116:	1192      	asrs	r2, r2, #6
 8001118:	17db      	asrs	r3, r3, #31
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	4a44      	ldr	r2, [pc, #272]	; (8001230 <fsm_man_run+0x5c4>)
 800111e:	6013      	str	r3, [r2, #0]
			setTimer(0, green_time1);
 8001120:	4b3d      	ldr	r3, [pc, #244]	; (8001218 <fsm_man_run+0x5ac>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	2000      	movs	r0, #0
 8001128:	f000 fb60 	bl	80017ec <setTimer>
			button_flag[0] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai GREEN_RED button=0 (vi GREEN_RED co doi nut nhan)
 800112c:	4b33      	ldr	r3, [pc, #204]	; (80011fc <fsm_man_run+0x590>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
			button_flag[2] = 0;
 8001132:	4b32      	ldr	r3, [pc, #200]	; (80011fc <fsm_man_run+0x590>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
			setTimer(2, 10);
 8001138:	210a      	movs	r1, #10
 800113a:	2002      	movs	r0, #2
 800113c:	f000 fb56 	bl	80017ec <setTimer>
			setTimer(3, 1000);
 8001140:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001144:	2003      	movs	r0, #3
 8001146:	f000 fb51 	bl	80017ec <setTimer>
		}
		if (checkTimer(2) == 1) {
 800114a:	2002      	movs	r0, #2
 800114c:	f000 fb9c 	bl	8001888 <checkTimer>
 8001150:	4603      	mov	r3, r0
 8001152:	2b01      	cmp	r3, #1
 8001154:	d116      	bne.n	8001184 <fsm_man_run+0x518>
			//Update Display;
			update7segBuffer(red_time2 / 1000, green_time2 / 1000);
 8001156:	4b2d      	ldr	r3, [pc, #180]	; (800120c <fsm_man_run+0x5a0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a30      	ldr	r2, [pc, #192]	; (800121c <fsm_man_run+0x5b0>)
 800115c:	fb82 1203 	smull	r1, r2, r2, r3
 8001160:	1192      	asrs	r2, r2, #6
 8001162:	17db      	asrs	r3, r3, #31
 8001164:	1ad0      	subs	r0, r2, r3
 8001166:	4b28      	ldr	r3, [pc, #160]	; (8001208 <fsm_man_run+0x59c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a2c      	ldr	r2, [pc, #176]	; (800121c <fsm_man_run+0x5b0>)
 800116c:	fb82 1203 	smull	r1, r2, r2, r3
 8001170:	1192      	asrs	r2, r2, #6
 8001172:	17db      	asrs	r3, r3, #31
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	4619      	mov	r1, r3
 8001178:	f7ff f9ec 	bl	8000554 <update7segBuffer>
			setTimer(2, 250);
 800117c:	21fa      	movs	r1, #250	; 0xfa
 800117e:	2002      	movs	r0, #2
 8001180:	f000 fb34 	bl	80017ec <setTimer>
		}
		if (checkTimer(1) == 1) {
 8001184:	2001      	movs	r0, #1
 8001186:	f000 fb7f 	bl	8001888 <checkTimer>
 800118a:	4603      	mov	r3, r0
 800118c:	2b01      	cmp	r3, #1
 800118e:	f040 812d 	bne.w	80013ec <fsm_man_run+0x780>
			status = GREEN_RED;
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <fsm_man_run+0x594>)
 8001194:	2203      	movs	r2, #3
 8001196:	601a      	str	r2, [r3, #0]
			local_green_time1 = green_time1 / 1000;
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <fsm_man_run+0x5ac>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a1f      	ldr	r2, [pc, #124]	; (800121c <fsm_man_run+0x5b0>)
 800119e:	fb82 1203 	smull	r1, r2, r2, r3
 80011a2:	1192      	asrs	r2, r2, #6
 80011a4:	17db      	asrs	r3, r3, #31
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <fsm_man_run+0x5b4>)
 80011aa:	6013      	str	r3, [r2, #0]
			local_red_time1 = red_time1 / 1000;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <fsm_man_run+0x5b8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a1a      	ldr	r2, [pc, #104]	; (800121c <fsm_man_run+0x5b0>)
 80011b2:	fb82 1203 	smull	r1, r2, r2, r3
 80011b6:	1192      	asrs	r2, r2, #6
 80011b8:	17db      	asrs	r3, r3, #31
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <fsm_man_run+0x5bc>)
 80011be:	6013      	str	r3, [r2, #0]
			local_amber_time1 = amber_time1 / 1000;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <fsm_man_run+0x5c0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a15      	ldr	r2, [pc, #84]	; (800121c <fsm_man_run+0x5b0>)
 80011c6:	fb82 1203 	smull	r1, r2, r2, r3
 80011ca:	1192      	asrs	r2, r2, #6
 80011cc:	17db      	asrs	r3, r3, #31
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	4a17      	ldr	r2, [pc, #92]	; (8001230 <fsm_man_run+0x5c4>)
 80011d2:	6013      	str	r3, [r2, #0]
			setTimer(0, green_time1);
 80011d4:	4b10      	ldr	r3, [pc, #64]	; (8001218 <fsm_man_run+0x5ac>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 fb06 	bl	80017ec <setTimer>
			button_flag[0] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai GREEN_RED button=0 (vi GREEN_RED co doi nut nhan)
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <fsm_man_run+0x590>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
			setTimer(2, 10);
 80011e6:	210a      	movs	r1, #10
 80011e8:	2002      	movs	r0, #2
 80011ea:	f000 faff 	bl	80017ec <setTimer>
			setTimer(3, 1000);
 80011ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011f2:	2003      	movs	r0, #3
 80011f4:	f000 fafa 	bl	80017ec <setTimer>
		}
		break;
 80011f8:	e0f8      	b.n	80013ec <fsm_man_run+0x780>
 80011fa:	bf00      	nop
 80011fc:	20000084 	.word	0x20000084
 8001200:	20000090 	.word	0x20000090
 8001204:	40010c00 	.word	0x40010c00
 8001208:	20000040 	.word	0x20000040
 800120c:	200000f0 	.word	0x200000f0
 8001210:	0001869f 	.word	0x0001869f
 8001214:	2000003c 	.word	0x2000003c
 8001218:	20000038 	.word	0x20000038
 800121c:	10624dd3 	.word	0x10624dd3
 8001220:	200000e4 	.word	0x200000e4
 8001224:	200000ec 	.word	0x200000ec
 8001228:	20000100 	.word	0x20000100
 800122c:	20000034 	.word	0x20000034
 8001230:	200000f8 	.word	0x200000f8
	case MAN_RED_AMBER:
		led_red_amber();
 8001234:	f000 f92c 	bl	8001490 <led_red_amber>
		if (button_flag[0] == 1) {
 8001238:	4b6f      	ldr	r3, [pc, #444]	; (80013f8 <fsm_man_run+0x78c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d10e      	bne.n	800125e <fsm_man_run+0x5f2>
			status = MAN_GREEN_RED;
 8001240:	4b6e      	ldr	r3, [pc, #440]	; (80013fc <fsm_man_run+0x790>)
 8001242:	220d      	movs	r2, #13
 8001244:	601a      	str	r2, [r3, #0]
			setTimer(1, 10000);
 8001246:	f242 7110 	movw	r1, #10000	; 0x2710
 800124a:	2001      	movs	r0, #1
 800124c:	f000 face 	bl	80017ec <setTimer>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001250:	2101      	movs	r1, #1
 8001252:	486b      	ldr	r0, [pc, #428]	; (8001400 <fsm_man_run+0x794>)
 8001254:	f000 fe67 	bl	8001f26 <HAL_GPIO_TogglePin>
			button_flag[0] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai tiep theo button=0
 8001258:	4b67      	ldr	r3, [pc, #412]	; (80013f8 <fsm_man_run+0x78c>)
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
		}
		if (button_flag[1] == 1) {
 800125e:	4b66      	ldr	r3, [pc, #408]	; (80013f8 <fsm_man_run+0x78c>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d127      	bne.n	80012b6 <fsm_man_run+0x64a>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001266:	2102      	movs	r1, #2
 8001268:	4865      	ldr	r0, [pc, #404]	; (8001400 <fsm_man_run+0x794>)
 800126a:	f000 fe5c 	bl	8001f26 <HAL_GPIO_TogglePin>
			amber_time2 += 1000;
 800126e:	4b65      	ldr	r3, [pc, #404]	; (8001404 <fsm_man_run+0x798>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001276:	4a63      	ldr	r2, [pc, #396]	; (8001404 <fsm_man_run+0x798>)
 8001278:	6013      	str	r3, [r2, #0]
			red_time2 += 1000;
 800127a:	4b63      	ldr	r3, [pc, #396]	; (8001408 <fsm_man_run+0x79c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001282:	4a61      	ldr	r2, [pc, #388]	; (8001408 <fsm_man_run+0x79c>)
 8001284:	6013      	str	r3, [r2, #0]
			if (red_time2 >= 100000) {
 8001286:	4b60      	ldr	r3, [pc, #384]	; (8001408 <fsm_man_run+0x79c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a60      	ldr	r2, [pc, #384]	; (800140c <fsm_man_run+0x7a0>)
 800128c:	4293      	cmp	r3, r2
 800128e:	dd0a      	ble.n	80012a6 <fsm_man_run+0x63a>
				amber_time2 = 1000;
 8001290:	4b5c      	ldr	r3, [pc, #368]	; (8001404 <fsm_man_run+0x798>)
 8001292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001296:	601a      	str	r2, [r3, #0]
				red_time2 = green_time2 + amber_time2;
 8001298:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <fsm_man_run+0x7a4>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b59      	ldr	r3, [pc, #356]	; (8001404 <fsm_man_run+0x798>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4413      	add	r3, r2
 80012a2:	4a59      	ldr	r2, [pc, #356]	; (8001408 <fsm_man_run+0x79c>)
 80012a4:	6013      	str	r3, [r2, #0]
			}
			setTimer(1, 10000);
 80012a6:	f242 7110 	movw	r1, #10000	; 0x2710
 80012aa:	2001      	movs	r0, #1
 80012ac:	f000 fa9e 	bl	80017ec <setTimer>
			button_flag[1] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai tiep theo button=0
 80012b0:	4b51      	ldr	r3, [pc, #324]	; (80013f8 <fsm_man_run+0x78c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
		}
		if (button_flag[2] == 1) {
 80012b6:	4b50      	ldr	r3, [pc, #320]	; (80013f8 <fsm_man_run+0x78c>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d139      	bne.n	8001332 <fsm_man_run+0x6c6>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80012be:	2104      	movs	r1, #4
 80012c0:	484f      	ldr	r0, [pc, #316]	; (8001400 <fsm_man_run+0x794>)
 80012c2:	f000 fe30 	bl	8001f26 <HAL_GPIO_TogglePin>
			status = GREEN_RED;
 80012c6:	4b4d      	ldr	r3, [pc, #308]	; (80013fc <fsm_man_run+0x790>)
 80012c8:	2203      	movs	r2, #3
 80012ca:	601a      	str	r2, [r3, #0]
			local_green_time1 = green_time1 / 1000;
 80012cc:	4b51      	ldr	r3, [pc, #324]	; (8001414 <fsm_man_run+0x7a8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a51      	ldr	r2, [pc, #324]	; (8001418 <fsm_man_run+0x7ac>)
 80012d2:	fb82 1203 	smull	r1, r2, r2, r3
 80012d6:	1192      	asrs	r2, r2, #6
 80012d8:	17db      	asrs	r3, r3, #31
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	4a4f      	ldr	r2, [pc, #316]	; (800141c <fsm_man_run+0x7b0>)
 80012de:	6013      	str	r3, [r2, #0]
			local_red_time1 = red_time1 / 1000;
 80012e0:	4b4f      	ldr	r3, [pc, #316]	; (8001420 <fsm_man_run+0x7b4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a4c      	ldr	r2, [pc, #304]	; (8001418 <fsm_man_run+0x7ac>)
 80012e6:	fb82 1203 	smull	r1, r2, r2, r3
 80012ea:	1192      	asrs	r2, r2, #6
 80012ec:	17db      	asrs	r3, r3, #31
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	4a4c      	ldr	r2, [pc, #304]	; (8001424 <fsm_man_run+0x7b8>)
 80012f2:	6013      	str	r3, [r2, #0]
			local_amber_time1 = amber_time1 / 1000;
 80012f4:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <fsm_man_run+0x7bc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a47      	ldr	r2, [pc, #284]	; (8001418 <fsm_man_run+0x7ac>)
 80012fa:	fb82 1203 	smull	r1, r2, r2, r3
 80012fe:	1192      	asrs	r2, r2, #6
 8001300:	17db      	asrs	r3, r3, #31
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	4a49      	ldr	r2, [pc, #292]	; (800142c <fsm_man_run+0x7c0>)
 8001306:	6013      	str	r3, [r2, #0]
			setTimer(0, green_time1);
 8001308:	4b42      	ldr	r3, [pc, #264]	; (8001414 <fsm_man_run+0x7a8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	2000      	movs	r0, #0
 8001310:	f000 fa6c 	bl	80017ec <setTimer>
			button_flag[0] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai GREEN_RED button=0 (vi GREEN_RED co doi nut nhan)
 8001314:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <fsm_man_run+0x78c>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
			button_flag[2] = 0;
 800131a:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <fsm_man_run+0x78c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
			setTimer(2, 10);
 8001320:	210a      	movs	r1, #10
 8001322:	2002      	movs	r0, #2
 8001324:	f000 fa62 	bl	80017ec <setTimer>
			setTimer(3, 1000);
 8001328:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800132c:	2003      	movs	r0, #3
 800132e:	f000 fa5d 	bl	80017ec <setTimer>
		}
		if (checkTimer(2) == 1) {
 8001332:	2002      	movs	r0, #2
 8001334:	f000 faa8 	bl	8001888 <checkTimer>
 8001338:	4603      	mov	r3, r0
 800133a:	2b01      	cmp	r3, #1
 800133c:	d116      	bne.n	800136c <fsm_man_run+0x700>
			//Update Display;
			update7segBuffer(red_time2 / 1000, amber_time2 / 1000);
 800133e:	4b32      	ldr	r3, [pc, #200]	; (8001408 <fsm_man_run+0x79c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a35      	ldr	r2, [pc, #212]	; (8001418 <fsm_man_run+0x7ac>)
 8001344:	fb82 1203 	smull	r1, r2, r2, r3
 8001348:	1192      	asrs	r2, r2, #6
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1ad0      	subs	r0, r2, r3
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <fsm_man_run+0x798>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a31      	ldr	r2, [pc, #196]	; (8001418 <fsm_man_run+0x7ac>)
 8001354:	fb82 1203 	smull	r1, r2, r2, r3
 8001358:	1192      	asrs	r2, r2, #6
 800135a:	17db      	asrs	r3, r3, #31
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	4619      	mov	r1, r3
 8001360:	f7ff f8f8 	bl	8000554 <update7segBuffer>
			setTimer(2, 250);
 8001364:	21fa      	movs	r1, #250	; 0xfa
 8001366:	2002      	movs	r0, #2
 8001368:	f000 fa40 	bl	80017ec <setTimer>
		}
		if (checkTimer(1) == 1) {
 800136c:	2001      	movs	r0, #1
 800136e:	f000 fa8b 	bl	8001888 <checkTimer>
 8001372:	4603      	mov	r3, r0
 8001374:	2b01      	cmp	r3, #1
 8001376:	d13b      	bne.n	80013f0 <fsm_man_run+0x784>
			status = GREEN_RED;
 8001378:	4b20      	ldr	r3, [pc, #128]	; (80013fc <fsm_man_run+0x790>)
 800137a:	2203      	movs	r2, #3
 800137c:	601a      	str	r2, [r3, #0]
			local_green_time1 = green_time1 / 1000;
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <fsm_man_run+0x7a8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a25      	ldr	r2, [pc, #148]	; (8001418 <fsm_man_run+0x7ac>)
 8001384:	fb82 1203 	smull	r1, r2, r2, r3
 8001388:	1192      	asrs	r2, r2, #6
 800138a:	17db      	asrs	r3, r3, #31
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	4a23      	ldr	r2, [pc, #140]	; (800141c <fsm_man_run+0x7b0>)
 8001390:	6013      	str	r3, [r2, #0]
			local_red_time1 = red_time1 / 1000;
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <fsm_man_run+0x7b4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a20      	ldr	r2, [pc, #128]	; (8001418 <fsm_man_run+0x7ac>)
 8001398:	fb82 1203 	smull	r1, r2, r2, r3
 800139c:	1192      	asrs	r2, r2, #6
 800139e:	17db      	asrs	r3, r3, #31
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	4a20      	ldr	r2, [pc, #128]	; (8001424 <fsm_man_run+0x7b8>)
 80013a4:	6013      	str	r3, [r2, #0]
			local_amber_time1 = amber_time1 / 1000;
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <fsm_man_run+0x7bc>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <fsm_man_run+0x7ac>)
 80013ac:	fb82 1203 	smull	r1, r2, r2, r3
 80013b0:	1192      	asrs	r2, r2, #6
 80013b2:	17db      	asrs	r3, r3, #31
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	4a1d      	ldr	r2, [pc, #116]	; (800142c <fsm_man_run+0x7c0>)
 80013b8:	6013      	str	r3, [r2, #0]
			setTimer(0, green_time1);
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <fsm_man_run+0x7a8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4619      	mov	r1, r3
 80013c0:	2000      	movs	r0, #0
 80013c2:	f000 fa13 	bl	80017ec <setTimer>
			button_flag[0] = 0; // chuan bi cho trang thai nut nhan, dam bao truoc trang thai GREEN_RED button=0 (vi GREEN_RED co doi nut nhan)
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <fsm_man_run+0x78c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
			setTimer(2, 10);
 80013cc:	210a      	movs	r1, #10
 80013ce:	2002      	movs	r0, #2
 80013d0:	f000 fa0c 	bl	80017ec <setTimer>
			setTimer(3, 1000);
 80013d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 fa07 	bl	80017ec <setTimer>
		}
		break;
 80013de:	e007      	b.n	80013f0 <fsm_man_run+0x784>
	default:
		break;
 80013e0:	bf00      	nop
 80013e2:	e006      	b.n	80013f2 <fsm_man_run+0x786>
		break;
 80013e4:	bf00      	nop
 80013e6:	e004      	b.n	80013f2 <fsm_man_run+0x786>
		break;
 80013e8:	bf00      	nop
 80013ea:	e002      	b.n	80013f2 <fsm_man_run+0x786>
		break;
 80013ec:	bf00      	nop
 80013ee:	e000      	b.n	80013f2 <fsm_man_run+0x786>
		break;
 80013f0:	bf00      	nop

	}
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000084 	.word	0x20000084
 80013fc:	20000090 	.word	0x20000090
 8001400:	40010c00 	.word	0x40010c00
 8001404:	2000003c 	.word	0x2000003c
 8001408:	200000f0 	.word	0x200000f0
 800140c:	0001869f 	.word	0x0001869f
 8001410:	20000040 	.word	0x20000040
 8001414:	20000038 	.word	0x20000038
 8001418:	10624dd3 	.word	0x10624dd3
 800141c:	200000e4 	.word	0x200000e4
 8001420:	200000ec 	.word	0x200000ec
 8001424:	20000100 	.word	0x20000100
 8001428:	20000034 	.word	0x20000034
 800142c:	200000f8 	.word	0x200000f8

08001430 <led_green_red>:
 *  Created on: Oct 8, 2024
 *      Author: ACER
 */
#include"led_traffic.h"

void led_green_red(){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0| GPIO_PIN_4,SET);
 8001434:	2201      	movs	r2, #1
 8001436:	2111      	movs	r1, #17
 8001438:	4804      	ldr	r0, [pc, #16]	; (800144c <led_green_red+0x1c>)
 800143a:	f000 fd5c 	bl	8001ef6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1| GPIO_PIN_2| GPIO_PIN_3| GPIO_PIN_5,RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	212e      	movs	r1, #46	; 0x2e
 8001442:	4802      	ldr	r0, [pc, #8]	; (800144c <led_green_red+0x1c>)
 8001444:	f000 fd57 	bl	8001ef6 <HAL_GPIO_WritePin>
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40010800 	.word	0x40010800

08001450 <led_amber_red>:
void led_amber_red(){
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2| GPIO_PIN_4,SET);
 8001454:	2201      	movs	r2, #1
 8001456:	2114      	movs	r1, #20
 8001458:	4804      	ldr	r0, [pc, #16]	; (800146c <led_amber_red+0x1c>)
 800145a:	f000 fd4c 	bl	8001ef6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0| GPIO_PIN_1| GPIO_PIN_3| GPIO_PIN_5,RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	212b      	movs	r1, #43	; 0x2b
 8001462:	4802      	ldr	r0, [pc, #8]	; (800146c <led_amber_red+0x1c>)
 8001464:	f000 fd47 	bl	8001ef6 <HAL_GPIO_WritePin>
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40010800 	.word	0x40010800

08001470 <led_red_green>:
void led_red_green(){
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1| GPIO_PIN_3,SET);
 8001474:	2201      	movs	r2, #1
 8001476:	210a      	movs	r1, #10
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <led_red_green+0x1c>)
 800147a:	f000 fd3c 	bl	8001ef6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0| GPIO_PIN_2| GPIO_PIN_4| GPIO_PIN_5,RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	2135      	movs	r1, #53	; 0x35
 8001482:	4802      	ldr	r0, [pc, #8]	; (800148c <led_red_green+0x1c>)
 8001484:	f000 fd37 	bl	8001ef6 <HAL_GPIO_WritePin>

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40010800 	.word	0x40010800

08001490 <led_red_amber>:
void led_red_amber(){
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1| GPIO_PIN_5,SET);
 8001494:	2201      	movs	r2, #1
 8001496:	2122      	movs	r1, #34	; 0x22
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <led_red_amber+0x1c>)
 800149a:	f000 fd2c 	bl	8001ef6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0| GPIO_PIN_2| GPIO_PIN_4| GPIO_PIN_3,RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	211d      	movs	r1, #29
 80014a2:	4802      	ldr	r0, [pc, #8]	; (80014ac <led_red_amber+0x1c>)
 80014a4:	f000 fd27 	bl	8001ef6 <HAL_GPIO_WritePin>

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40010800 	.word	0x40010800

080014b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b4:	f000 fa1e 	bl	80018f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b8:	f000 f80e 	bl	80014d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014bc:	f000 f894 	bl	80015e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80014c0:	f000 f846 	bl	8001550 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <main+0x24>)
 80014c6:	f001 f973 	bl	80027b0 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
  fsm_auto_run();
 80014ca:	f7ff f967 	bl	800079c <fsm_auto_run>
  fsm_man_run();
 80014ce:	f7ff fbcd 	bl	8000c6c <fsm_man_run>
  fsm_auto_run();
 80014d2:	e7fa      	b.n	80014ca <main+0x1a>
 80014d4:	20000104 	.word	0x20000104

080014d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b090      	sub	sp, #64	; 0x40
 80014dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014de:	f107 0318 	add.w	r3, r7, #24
 80014e2:	2228      	movs	r2, #40	; 0x28
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 fd12 	bl	8002f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014fe:	2301      	movs	r3, #1
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001502:	2310      	movs	r3, #16
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001506:	2300      	movs	r3, #0
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150a:	f107 0318 	add.w	r3, r7, #24
 800150e:	4618      	mov	r0, r3
 8001510:	f000 fd22 	bl	8001f58 <HAL_RCC_OscConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800151a:	f000 f8d3 	bl	80016c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151e:	230f      	movs	r3, #15
 8001520:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001522:	2300      	movs	r3, #0
 8001524:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f000 ff8e 	bl	8002458 <HAL_RCC_ClockConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001542:	f000 f8bf 	bl	80016c4 <Error_Handler>
  }
}
 8001546:	bf00      	nop
 8001548:	3740      	adds	r7, #64	; 0x40
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <MX_TIM2_Init+0x94>)
 800156e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001572:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_TIM2_Init+0x94>)
 8001576:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800157a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <MX_TIM2_Init+0x94>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_TIM2_Init+0x94>)
 8001584:	2209      	movs	r2, #9
 8001586:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <MX_TIM2_Init+0x94>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <MX_TIM2_Init+0x94>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001594:	4813      	ldr	r0, [pc, #76]	; (80015e4 <MX_TIM2_Init+0x94>)
 8001596:	f001 f8bb 	bl	8002710 <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015a0:	f000 f890 	bl	80016c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	4619      	mov	r1, r3
 80015b0:	480c      	ldr	r0, [pc, #48]	; (80015e4 <MX_TIM2_Init+0x94>)
 80015b2:	f001 fa39 	bl	8002a28 <HAL_TIM_ConfigClockSource>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015bc:	f000 f882 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_TIM2_Init+0x94>)
 80015ce:	f001 fc11 	bl	8002df4 <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015d8:	f000 f874 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000104 	.word	0x20000104

080015e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b28      	ldr	r3, [pc, #160]	; (80016a0 <MX_GPIO_Init+0xb8>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <MX_GPIO_Init+0xb8>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <MX_GPIO_Init+0xb8>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <MX_GPIO_Init+0xb8>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a21      	ldr	r2, [pc, #132]	; (80016a0 <MX_GPIO_Init+0xb8>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <MX_GPIO_Init+0xb8>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800162c:	2200      	movs	r2, #0
 800162e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001632:	481c      	ldr	r0, [pc, #112]	; (80016a4 <MX_GPIO_Init+0xbc>)
 8001634:	f000 fc5f 	bl	8001ef6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001638:	2200      	movs	r2, #0
 800163a:	f64f 7187 	movw	r1, #65415	; 0xff87
 800163e:	481a      	ldr	r0, [pc, #104]	; (80016a8 <MX_GPIO_Init+0xc0>)
 8001640:	f000 fc59 	bl	8001ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001648:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001652:	2302      	movs	r3, #2
 8001654:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	4619      	mov	r1, r3
 800165c:	4811      	ldr	r0, [pc, #68]	; (80016a4 <MX_GPIO_Init+0xbc>)
 800165e:	f000 fab9 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001662:	f64f 7387 	movw	r3, #65415	; 0xff87
 8001666:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2302      	movs	r3, #2
 8001672:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	4619      	mov	r1, r3
 800167a:	480b      	ldr	r0, [pc, #44]	; (80016a8 <MX_GPIO_Init+0xc0>)
 800167c:	f000 faaa 	bl	8001bd4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5| GPIO_PIN_6;  // PB4, PB5, PB6
 8001680:	2378      	movs	r3, #120	; 0x78
 8001682:	60bb      	str	r3, [r7, #8]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;                      // Set as input
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Pull = GPIO_PULLUP;                          // Enable pull-up resistors
 8001688:	2301      	movs	r3, #1
 800168a:	613b      	str	r3, [r7, #16]
     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	4619      	mov	r1, r3
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_GPIO_Init+0xc0>)
 8001694:	f000 fa9e 	bl	8001bd4 <HAL_GPIO_Init>
}
 8001698:	bf00      	nop
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010800 	.word	0x40010800
 80016a8:	40010c00 	.word	0x40010c00

080016ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	timerRun();
 80016b4:	f000 f8b8 	bl	8001828 <timerRun>
	getKeyInput();
 80016b8:	f7fe ffc8 	bl	800064c <getKeyInput>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c8:	b672      	cpsid	i
}
 80016ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016cc:	e7fe      	b.n	80016cc <Error_Handler+0x8>
	...

080016d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_MspInit+0x5c>)
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	4a14      	ldr	r2, [pc, #80]	; (800172c <HAL_MspInit+0x5c>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6193      	str	r3, [r2, #24]
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_MspInit+0x5c>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <HAL_MspInit+0x5c>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a0e      	ldr	r2, [pc, #56]	; (800172c <HAL_MspInit+0x5c>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_MspInit+0x5c>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_MspInit+0x60>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_MspInit+0x60>)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	40021000 	.word	0x40021000
 8001730:	40010000 	.word	0x40010000

08001734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001744:	d113      	bne.n	800176e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <HAL_TIM_Base_MspInit+0x44>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <HAL_TIM_Base_MspInit+0x44>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_TIM_Base_MspInit+0x44>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	201c      	movs	r0, #28
 8001764:	f000 f9ff 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001768:	201c      	movs	r0, #28
 800176a:	f000 fa18 	bl	8001b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <NMI_Handler+0x4>

08001782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <MemManage_Handler+0x4>

0800178e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <UsageFault_Handler+0x4>

0800179a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c2:	f000 f8dd 	bl	8001980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <TIM2_IRQHandler+0x10>)
 80017d2:	f001 f839 	bl	8002848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000104 	.word	0x20000104

080017e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <setTimer>:

int timerFlag[10] = {0};
int counter[10] = {0};
int TIMER_CYCLE = 10;

void setTimer(int num,int dur){
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
	counter[num] = dur/TIMER_CYCLE;
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <setTimer+0x30>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	fb92 f2f3 	sdiv	r2, r2, r3
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <setTimer+0x34>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timerFlag[num] = 0;
 8001808:	4a06      	ldr	r2, [pc, #24]	; (8001824 <setTimer+0x38>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2100      	movs	r1, #0
 800180e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	20000048 	.word	0x20000048
 8001820:	200000bc 	.word	0x200000bc
 8001824:	20000094 	.word	0x20000094

08001828 <timerRun>:
void timerRun(){
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
	for(int i=0; i < 10; i++){
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	e01c      	b.n	800186e <timerRun+0x46>
		if(counter[i] > 0) counter[i]--;
 8001834:	4a12      	ldr	r2, [pc, #72]	; (8001880 <timerRun+0x58>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183c:	2b00      	cmp	r3, #0
 800183e:	dd08      	ble.n	8001852 <timerRun+0x2a>
 8001840:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <timerRun+0x58>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001848:	1e5a      	subs	r2, r3, #1
 800184a:	490d      	ldr	r1, [pc, #52]	; (8001880 <timerRun+0x58>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(counter[i] <= 0) {
 8001852:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <timerRun+0x58>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185a:	2b00      	cmp	r3, #0
 800185c:	dc04      	bgt.n	8001868 <timerRun+0x40>
			timerFlag[i] = 1;
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <timerRun+0x5c>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2101      	movs	r1, #1
 8001864:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0; i < 10; i++){
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3301      	adds	r3, #1
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b09      	cmp	r3, #9
 8001872:	dddf      	ble.n	8001834 <timerRun+0xc>
		}
	}

}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	200000bc 	.word	0x200000bc
 8001884:	20000094 	.word	0x20000094

08001888 <checkTimer>:
int checkTimer(int num){
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	return timerFlag[num];
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <checkTimer+0x1c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000094 	.word	0x20000094

080018a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018a8:	f7ff ff9a 	bl	80017e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ac:	480b      	ldr	r0, [pc, #44]	; (80018dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018ae:	490c      	ldr	r1, [pc, #48]	; (80018e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018b0:	4a0c      	ldr	r2, [pc, #48]	; (80018e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b4:	e002      	b.n	80018bc <LoopCopyDataInit>

080018b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ba:	3304      	adds	r3, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c0:	d3f9      	bcc.n	80018b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c2:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018c4:	4c09      	ldr	r4, [pc, #36]	; (80018ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c8:	e001      	b.n	80018ce <LoopFillZerobss>

080018ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018cc:	3204      	adds	r2, #4

080018ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d0:	d3fb      	bcc.n	80018ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d2:	f001 faf9 	bl	8002ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018d6:	f7ff fdeb 	bl	80014b0 <main>
  bx lr
 80018da:	4770      	bx	lr
  ldr r0, =_sdata
 80018dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80018e4:	08002f64 	.word	0x08002f64
  ldr r2, =_sbss
 80018e8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80018ec:	20000150 	.word	0x20000150

080018f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC1_2_IRQHandler>
	...

080018f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <HAL_Init+0x28>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a07      	ldr	r2, [pc, #28]	; (800191c <HAL_Init+0x28>)
 80018fe:	f043 0310 	orr.w	r3, r3, #16
 8001902:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001904:	2003      	movs	r0, #3
 8001906:	f000 f923 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800190a:	200f      	movs	r0, #15
 800190c:	f000 f808 	bl	8001920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001910:	f7ff fede 	bl	80016d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40022000 	.word	0x40022000

08001920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <HAL_InitTick+0x54>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_InitTick+0x58>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001936:	fbb3 f3f1 	udiv	r3, r3, r1
 800193a:	fbb2 f3f3 	udiv	r3, r2, r3
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f93b 	bl	8001bba <HAL_SYSTICK_Config>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e00e      	b.n	800196c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b0f      	cmp	r3, #15
 8001952:	d80a      	bhi.n	800196a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001954:	2200      	movs	r2, #0
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f000 f903 	bl	8001b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001960:	4a06      	ldr	r2, [pc, #24]	; (800197c <HAL_InitTick+0x5c>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000044 	.word	0x20000044
 8001978:	20000050 	.word	0x20000050
 800197c:	2000004c 	.word	0x2000004c

08001980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_IncTick+0x1c>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_IncTick+0x20>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4413      	add	r3, r2
 8001990:	4a03      	ldr	r2, [pc, #12]	; (80019a0 <HAL_IncTick+0x20>)
 8001992:	6013      	str	r3, [r2, #0]
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	20000050 	.word	0x20000050
 80019a0:	2000014c 	.word	0x2000014c

080019a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b02      	ldr	r3, [pc, #8]	; (80019b4 <HAL_GetTick+0x10>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	2000014c 	.word	0x2000014c

080019b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d4:	4013      	ands	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ea:	4a04      	ldr	r2, [pc, #16]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	60d3      	str	r3, [r2, #12]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <__NVIC_GetPriorityGrouping+0x18>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	f003 0307 	and.w	r3, r3, #7
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db0b      	blt.n	8001a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	f003 021f 	and.w	r2, r3, #31
 8001a34:	4906      	ldr	r1, [pc, #24]	; (8001a50 <__NVIC_EnableIRQ+0x34>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	; (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	; (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
         );
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b1c:	d301      	bcc.n	8001b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00f      	b.n	8001b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <SysTick_Config+0x40>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f7ff ff90 	bl	8001a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <SysTick_Config+0x40>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <SysTick_Config+0x40>)
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	e000e010 	.word	0xe000e010

08001b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff2d 	bl	80019b8 <__NVIC_SetPriorityGrouping>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b78:	f7ff ff42 	bl	8001a00 <__NVIC_GetPriorityGrouping>
 8001b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	6978      	ldr	r0, [r7, #20]
 8001b84:	f7ff ff90 	bl	8001aa8 <NVIC_EncodePriority>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff5f 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff35 	bl	8001a1c <__NVIC_EnableIRQ>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ffa2 	bl	8001b0c <SysTick_Config>
 8001bc8:	4603      	mov	r3, r0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b08b      	sub	sp, #44	; 0x2c
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be6:	e148      	b.n	8001e7a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001be8:	2201      	movs	r2, #1
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	f040 8137 	bne.w	8001e74 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4aa3      	ldr	r2, [pc, #652]	; (8001e98 <HAL_GPIO_Init+0x2c4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d05e      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c10:	4aa1      	ldr	r2, [pc, #644]	; (8001e98 <HAL_GPIO_Init+0x2c4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d875      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c16:	4aa1      	ldr	r2, [pc, #644]	; (8001e9c <HAL_GPIO_Init+0x2c8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d058      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c1c:	4a9f      	ldr	r2, [pc, #636]	; (8001e9c <HAL_GPIO_Init+0x2c8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d86f      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c22:	4a9f      	ldr	r2, [pc, #636]	; (8001ea0 <HAL_GPIO_Init+0x2cc>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d052      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c28:	4a9d      	ldr	r2, [pc, #628]	; (8001ea0 <HAL_GPIO_Init+0x2cc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d869      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c2e:	4a9d      	ldr	r2, [pc, #628]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d04c      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c34:	4a9b      	ldr	r2, [pc, #620]	; (8001ea4 <HAL_GPIO_Init+0x2d0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d863      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c3a:	4a9b      	ldr	r2, [pc, #620]	; (8001ea8 <HAL_GPIO_Init+0x2d4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d046      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
 8001c40:	4a99      	ldr	r2, [pc, #612]	; (8001ea8 <HAL_GPIO_Init+0x2d4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d85d      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c46:	2b12      	cmp	r3, #18
 8001c48:	d82a      	bhi.n	8001ca0 <HAL_GPIO_Init+0xcc>
 8001c4a:	2b12      	cmp	r3, #18
 8001c4c:	d859      	bhi.n	8001d02 <HAL_GPIO_Init+0x12e>
 8001c4e:	a201      	add	r2, pc, #4	; (adr r2, 8001c54 <HAL_GPIO_Init+0x80>)
 8001c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c54:	08001ccf 	.word	0x08001ccf
 8001c58:	08001ca9 	.word	0x08001ca9
 8001c5c:	08001cbb 	.word	0x08001cbb
 8001c60:	08001cfd 	.word	0x08001cfd
 8001c64:	08001d03 	.word	0x08001d03
 8001c68:	08001d03 	.word	0x08001d03
 8001c6c:	08001d03 	.word	0x08001d03
 8001c70:	08001d03 	.word	0x08001d03
 8001c74:	08001d03 	.word	0x08001d03
 8001c78:	08001d03 	.word	0x08001d03
 8001c7c:	08001d03 	.word	0x08001d03
 8001c80:	08001d03 	.word	0x08001d03
 8001c84:	08001d03 	.word	0x08001d03
 8001c88:	08001d03 	.word	0x08001d03
 8001c8c:	08001d03 	.word	0x08001d03
 8001c90:	08001d03 	.word	0x08001d03
 8001c94:	08001d03 	.word	0x08001d03
 8001c98:	08001cb1 	.word	0x08001cb1
 8001c9c:	08001cc5 	.word	0x08001cc5
 8001ca0:	4a82      	ldr	r2, [pc, #520]	; (8001eac <HAL_GPIO_Init+0x2d8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d013      	beq.n	8001cce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ca6:	e02c      	b.n	8001d02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	623b      	str	r3, [r7, #32]
          break;
 8001cae:	e029      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	623b      	str	r3, [r7, #32]
          break;
 8001cb8:	e024      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	3308      	adds	r3, #8
 8001cc0:	623b      	str	r3, [r7, #32]
          break;
 8001cc2:	e01f      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	330c      	adds	r3, #12
 8001cca:	623b      	str	r3, [r7, #32]
          break;
 8001ccc:	e01a      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	623b      	str	r3, [r7, #32]
          break;
 8001cda:	e013      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce4:	2308      	movs	r3, #8
 8001ce6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	611a      	str	r2, [r3, #16]
          break;
 8001cee:	e009      	b.n	8001d04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	615a      	str	r2, [r3, #20]
          break;
 8001cfa:	e003      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	623b      	str	r3, [r7, #32]
          break;
 8001d00:	e000      	b.n	8001d04 <HAL_GPIO_Init+0x130>
          break;
 8001d02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2bff      	cmp	r3, #255	; 0xff
 8001d08:	d801      	bhi.n	8001d0e <HAL_GPIO_Init+0x13a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	e001      	b.n	8001d12 <HAL_GPIO_Init+0x13e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3304      	adds	r3, #4
 8001d12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2bff      	cmp	r3, #255	; 0xff
 8001d18:	d802      	bhi.n	8001d20 <HAL_GPIO_Init+0x14c>
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	e002      	b.n	8001d26 <HAL_GPIO_Init+0x152>
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	3b08      	subs	r3, #8
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	210f      	movs	r1, #15
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	401a      	ands	r2, r3
 8001d38:	6a39      	ldr	r1, [r7, #32]
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	431a      	orrs	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 8090 	beq.w	8001e74 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d54:	4b56      	ldr	r3, [pc, #344]	; (8001eb0 <HAL_GPIO_Init+0x2dc>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4a55      	ldr	r2, [pc, #340]	; (8001eb0 <HAL_GPIO_Init+0x2dc>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6193      	str	r3, [r2, #24]
 8001d60:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <HAL_GPIO_Init+0x2dc>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d6c:	4a51      	ldr	r2, [pc, #324]	; (8001eb4 <HAL_GPIO_Init+0x2e0>)
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	f003 0303 	and.w	r3, r3, #3
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	220f      	movs	r2, #15
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a49      	ldr	r2, [pc, #292]	; (8001eb8 <HAL_GPIO_Init+0x2e4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d00d      	beq.n	8001db4 <HAL_GPIO_Init+0x1e0>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a48      	ldr	r2, [pc, #288]	; (8001ebc <HAL_GPIO_Init+0x2e8>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d007      	beq.n	8001db0 <HAL_GPIO_Init+0x1dc>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a47      	ldr	r2, [pc, #284]	; (8001ec0 <HAL_GPIO_Init+0x2ec>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d101      	bne.n	8001dac <HAL_GPIO_Init+0x1d8>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e004      	b.n	8001db6 <HAL_GPIO_Init+0x1e2>
 8001dac:	2303      	movs	r3, #3
 8001dae:	e002      	b.n	8001db6 <HAL_GPIO_Init+0x1e2>
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_GPIO_Init+0x1e2>
 8001db4:	2300      	movs	r3, #0
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	f002 0203 	and.w	r2, r2, #3
 8001dbc:	0092      	lsls	r2, r2, #2
 8001dbe:	4093      	lsls	r3, r2
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dc6:	493b      	ldr	r1, [pc, #236]	; (8001eb4 <HAL_GPIO_Init+0x2e0>)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	4937      	ldr	r1, [pc, #220]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dee:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4933      	ldr	r1, [pc, #204]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e08:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	492d      	ldr	r1, [pc, #180]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60cb      	str	r3, [r1, #12]
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e16:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	4929      	ldr	r1, [pc, #164]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d006      	beq.n	8001e3e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e30:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4923      	ldr	r1, [pc, #140]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e3e:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	491f      	ldr	r1, [pc, #124]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d006      	beq.n	8001e66 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4919      	ldr	r1, [pc, #100]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	600b      	str	r3, [r1, #0]
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	4915      	ldr	r1, [pc, #84]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	3301      	adds	r3, #1
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	fa22 f303 	lsr.w	r3, r2, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f47f aeaf 	bne.w	8001be8 <HAL_GPIO_Init+0x14>
  }
}
 8001e8a:	bf00      	nop
 8001e8c:	bf00      	nop
 8001e8e:	372c      	adds	r7, #44	; 0x2c
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	10320000 	.word	0x10320000
 8001e9c:	10310000 	.word	0x10310000
 8001ea0:	10220000 	.word	0x10220000
 8001ea4:	10210000 	.word	0x10210000
 8001ea8:	10120000 	.word	0x10120000
 8001eac:	10110000 	.word	0x10110000
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	40010800 	.word	0x40010800
 8001ebc:	40010c00 	.word	0x40010c00
 8001ec0:	40011000 	.word	0x40011000
 8001ec4:	40010400 	.word	0x40010400

08001ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	887b      	ldrh	r3, [r7, #2]
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]
 8001ee4:	e001      	b.n	8001eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	807b      	strh	r3, [r7, #2]
 8001f02:	4613      	mov	r3, r2
 8001f04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f06:	787b      	ldrb	r3, [r7, #1]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0c:	887a      	ldrh	r2, [r7, #2]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f12:	e003      	b.n	8001f1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	041a      	lsls	r2, r3, #16
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	611a      	str	r2, [r3, #16]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr

08001f26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f38:	887a      	ldrh	r2, [r7, #2]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	041a      	lsls	r2, r3, #16
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	43d9      	mvns	r1, r3
 8001f44:	887b      	ldrh	r3, [r7, #2]
 8001f46:	400b      	ands	r3, r1
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	611a      	str	r2, [r3, #16]
}
 8001f4e:	bf00      	nop
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e26c      	b.n	8002444 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8087 	beq.w	8002086 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f78:	4b92      	ldr	r3, [pc, #584]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 030c 	and.w	r3, r3, #12
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d00c      	beq.n	8001f9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f84:	4b8f      	ldr	r3, [pc, #572]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d112      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x5e>
 8001f90:	4b8c      	ldr	r3, [pc, #560]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9c:	d10b      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f9e:	4b89      	ldr	r3, [pc, #548]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d06c      	beq.n	8002084 <HAL_RCC_OscConfig+0x12c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d168      	bne.n	8002084 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e246      	b.n	8002444 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x76>
 8001fc0:	4b80      	ldr	r3, [pc, #512]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a7f      	ldr	r2, [pc, #508]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	e02e      	b.n	800202c <HAL_RCC_OscConfig+0xd4>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x98>
 8001fd6:	4b7b      	ldr	r3, [pc, #492]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a7a      	ldr	r2, [pc, #488]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4b78      	ldr	r3, [pc, #480]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a77      	ldr	r2, [pc, #476]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	e01d      	b.n	800202c <HAL_RCC_OscConfig+0xd4>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0xbc>
 8001ffa:	4b72      	ldr	r3, [pc, #456]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a71      	ldr	r2, [pc, #452]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	4b6f      	ldr	r3, [pc, #444]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a6e      	ldr	r2, [pc, #440]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e00b      	b.n	800202c <HAL_RCC_OscConfig+0xd4>
 8002014:	4b6b      	ldr	r3, [pc, #428]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a6a      	ldr	r2, [pc, #424]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 800201a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b68      	ldr	r3, [pc, #416]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a67      	ldr	r2, [pc, #412]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d013      	beq.n	800205c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff fcb6 	bl	80019a4 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800203c:	f7ff fcb2 	bl	80019a4 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e1fa      	b.n	8002444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	4b5d      	ldr	r3, [pc, #372]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0xe4>
 800205a:	e014      	b.n	8002086 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff fca2 	bl	80019a4 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002064:	f7ff fc9e 	bl	80019a4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e1e6      	b.n	8002444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002076:	4b53      	ldr	r3, [pc, #332]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x10c>
 8002082:	e000      	b.n	8002086 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d063      	beq.n	800215a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002092:	4b4c      	ldr	r3, [pc, #304]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800209e:	4b49      	ldr	r3, [pc, #292]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d11c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x18c>
 80020aa:	4b46      	ldr	r3, [pc, #280]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d116      	bne.n	80020e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b6:	4b43      	ldr	r3, [pc, #268]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_RCC_OscConfig+0x176>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e1ba      	b.n	8002444 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ce:	4b3d      	ldr	r3, [pc, #244]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4939      	ldr	r1, [pc, #228]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e2:	e03a      	b.n	800215a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d020      	beq.n	800212e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ec:	4b36      	ldr	r3, [pc, #216]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7ff fc57 	bl	80019a4 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fa:	f7ff fc53 	bl	80019a4 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e19b      	b.n	8002444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210c:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002118:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4927      	ldr	r1, [pc, #156]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002128:	4313      	orrs	r3, r2
 800212a:	600b      	str	r3, [r1, #0]
 800212c:	e015      	b.n	800215a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212e:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <HAL_RCC_OscConfig+0x270>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7ff fc36 	bl	80019a4 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213c:	f7ff fc32 	bl	80019a4 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e17a      	b.n	8002444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214e:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d03a      	beq.n	80021dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d019      	beq.n	80021a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216e:	4b17      	ldr	r3, [pc, #92]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 8002170:	2201      	movs	r2, #1
 8002172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002174:	f7ff fc16 	bl	80019a4 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217c:	f7ff fc12 	bl	80019a4 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e15a      	b.n	8002444 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <HAL_RCC_OscConfig+0x26c>)
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800219a:	2001      	movs	r0, #1
 800219c:	f000 fa9a 	bl	80026d4 <RCC_Delay>
 80021a0:	e01c      	b.n	80021dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <HAL_RCC_OscConfig+0x274>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a8:	f7ff fbfc 	bl	80019a4 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ae:	e00f      	b.n	80021d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b0:	f7ff fbf8 	bl	80019a4 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d908      	bls.n	80021d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e140      	b.n	8002444 <HAL_RCC_OscConfig+0x4ec>
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	42420000 	.word	0x42420000
 80021cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d0:	4b9e      	ldr	r3, [pc, #632]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1e9      	bne.n	80021b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80a6 	beq.w	8002336 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ee:	4b97      	ldr	r3, [pc, #604]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10d      	bne.n	8002216 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fa:	4b94      	ldr	r3, [pc, #592]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	4a93      	ldr	r2, [pc, #588]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 8002200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002204:	61d3      	str	r3, [r2, #28]
 8002206:	4b91      	ldr	r3, [pc, #580]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002212:	2301      	movs	r3, #1
 8002214:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002216:	4b8e      	ldr	r3, [pc, #568]	; (8002450 <HAL_RCC_OscConfig+0x4f8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d118      	bne.n	8002254 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002222:	4b8b      	ldr	r3, [pc, #556]	; (8002450 <HAL_RCC_OscConfig+0x4f8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a8a      	ldr	r2, [pc, #552]	; (8002450 <HAL_RCC_OscConfig+0x4f8>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222e:	f7ff fbb9 	bl	80019a4 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002236:	f7ff fbb5 	bl	80019a4 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b64      	cmp	r3, #100	; 0x64
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e0fd      	b.n	8002444 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	4b81      	ldr	r3, [pc, #516]	; (8002450 <HAL_RCC_OscConfig+0x4f8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d106      	bne.n	800226a <HAL_RCC_OscConfig+0x312>
 800225c:	4b7b      	ldr	r3, [pc, #492]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4a7a      	ldr	r2, [pc, #488]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6213      	str	r3, [r2, #32]
 8002268:	e02d      	b.n	80022c6 <HAL_RCC_OscConfig+0x36e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10c      	bne.n	800228c <HAL_RCC_OscConfig+0x334>
 8002272:	4b76      	ldr	r3, [pc, #472]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	4a75      	ldr	r2, [pc, #468]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	6213      	str	r3, [r2, #32]
 800227e:	4b73      	ldr	r3, [pc, #460]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4a72      	ldr	r2, [pc, #456]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 8002284:	f023 0304 	bic.w	r3, r3, #4
 8002288:	6213      	str	r3, [r2, #32]
 800228a:	e01c      	b.n	80022c6 <HAL_RCC_OscConfig+0x36e>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	2b05      	cmp	r3, #5
 8002292:	d10c      	bne.n	80022ae <HAL_RCC_OscConfig+0x356>
 8002294:	4b6d      	ldr	r3, [pc, #436]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	4a6c      	ldr	r2, [pc, #432]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	6213      	str	r3, [r2, #32]
 80022a0:	4b6a      	ldr	r3, [pc, #424]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4a69      	ldr	r2, [pc, #420]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	6213      	str	r3, [r2, #32]
 80022ac:	e00b      	b.n	80022c6 <HAL_RCC_OscConfig+0x36e>
 80022ae:	4b67      	ldr	r3, [pc, #412]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4a66      	ldr	r2, [pc, #408]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	6213      	str	r3, [r2, #32]
 80022ba:	4b64      	ldr	r3, [pc, #400]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4a63      	ldr	r2, [pc, #396]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	f023 0304 	bic.w	r3, r3, #4
 80022c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d015      	beq.n	80022fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ce:	f7ff fb69 	bl	80019a4 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d4:	e00a      	b.n	80022ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d6:	f7ff fb65 	bl	80019a4 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e0ab      	b.n	8002444 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ec:	4b57      	ldr	r3, [pc, #348]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0ee      	beq.n	80022d6 <HAL_RCC_OscConfig+0x37e>
 80022f8:	e014      	b.n	8002324 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fa:	f7ff fb53 	bl	80019a4 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002302:	f7ff fb4f 	bl	80019a4 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002310:	4293      	cmp	r3, r2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e095      	b.n	8002444 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002318:	4b4c      	ldr	r3, [pc, #304]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1ee      	bne.n	8002302 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d105      	bne.n	8002336 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232a:	4b48      	ldr	r3, [pc, #288]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	4a47      	ldr	r2, [pc, #284]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 8002330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002334:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 8081 	beq.w	8002442 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002340:	4b42      	ldr	r3, [pc, #264]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b08      	cmp	r3, #8
 800234a:	d061      	beq.n	8002410 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d146      	bne.n	80023e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002354:	4b3f      	ldr	r3, [pc, #252]	; (8002454 <HAL_RCC_OscConfig+0x4fc>)
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7ff fb23 	bl	80019a4 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002362:	f7ff fb1f 	bl	80019a4 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e067      	b.n	8002444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002374:	4b35      	ldr	r3, [pc, #212]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f0      	bne.n	8002362 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002388:	d108      	bne.n	800239c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800238a:	4b30      	ldr	r3, [pc, #192]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	492d      	ldr	r1, [pc, #180]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800239c:	4b2b      	ldr	r3, [pc, #172]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a19      	ldr	r1, [r3, #32]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	430b      	orrs	r3, r1
 80023ae:	4927      	ldr	r1, [pc, #156]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b4:	4b27      	ldr	r3, [pc, #156]	; (8002454 <HAL_RCC_OscConfig+0x4fc>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ba:	f7ff faf3 	bl	80019a4 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c2:	f7ff faef 	bl	80019a4 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e037      	b.n	8002444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d4:	4b1d      	ldr	r3, [pc, #116]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x46a>
 80023e0:	e02f      	b.n	8002442 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <HAL_RCC_OscConfig+0x4fc>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7ff fadc 	bl	80019a4 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f0:	f7ff fad8 	bl	80019a4 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e020      	b.n	8002444 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x498>
 800240e:	e018      	b.n	8002442 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e013      	b.n	8002444 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_OscConfig+0x4f4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	429a      	cmp	r2, r3
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d001      	beq.n	8002442 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000
 8002450:	40007000 	.word	0x40007000
 8002454:	42420060 	.word	0x42420060

08002458 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e0d0      	b.n	800260e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800246c:	4b6a      	ldr	r3, [pc, #424]	; (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d910      	bls.n	800249c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b67      	ldr	r3, [pc, #412]	; (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 0207 	bic.w	r2, r3, #7
 8002482:	4965      	ldr	r1, [pc, #404]	; (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b63      	ldr	r3, [pc, #396]	; (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0b8      	b.n	800260e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b4:	4b59      	ldr	r3, [pc, #356]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4a58      	ldr	r2, [pc, #352]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024cc:	4b53      	ldr	r3, [pc, #332]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a52      	ldr	r2, [pc, #328]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d8:	4b50      	ldr	r3, [pc, #320]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	494d      	ldr	r1, [pc, #308]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d040      	beq.n	8002578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d107      	bne.n	800250e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	4b47      	ldr	r3, [pc, #284]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d115      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e07f      	b.n	800260e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002516:	4b41      	ldr	r3, [pc, #260]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e073      	b.n	800260e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e06b      	b.n	800260e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002536:	4b39      	ldr	r3, [pc, #228]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f023 0203 	bic.w	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4936      	ldr	r1, [pc, #216]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002548:	f7ff fa2c 	bl	80019a4 <HAL_GetTick>
 800254c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254e:	e00a      	b.n	8002566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002550:	f7ff fa28 	bl	80019a4 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e053      	b.n	800260e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	4b2d      	ldr	r3, [pc, #180]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 020c 	and.w	r2, r3, #12
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	429a      	cmp	r2, r3
 8002576:	d1eb      	bne.n	8002550 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d210      	bcs.n	80025a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	4b24      	ldr	r3, [pc, #144]	; (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 0207 	bic.w	r2, r3, #7
 800258e:	4922      	ldr	r1, [pc, #136]	; (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	4313      	orrs	r3, r2
 8002594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCC_ClockConfig+0x1c0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d001      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e032      	b.n	800260e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d008      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b4:	4b19      	ldr	r3, [pc, #100]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4916      	ldr	r1, [pc, #88]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	490e      	ldr	r1, [pc, #56]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025e6:	f000 f821 	bl	800262c <HAL_RCC_GetSysClockFreq>
 80025ea:	4602      	mov	r2, r0
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_RCC_ClockConfig+0x1c4>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	490a      	ldr	r1, [pc, #40]	; (8002620 <HAL_RCC_ClockConfig+0x1c8>)
 80025f8:	5ccb      	ldrb	r3, [r1, r3]
 80025fa:	fa22 f303 	lsr.w	r3, r2, r3
 80025fe:	4a09      	ldr	r2, [pc, #36]	; (8002624 <HAL_RCC_ClockConfig+0x1cc>)
 8002600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_RCC_ClockConfig+0x1d0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff f98a 	bl	8001920 <HAL_InitTick>

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40022000 	.word	0x40022000
 800261c:	40021000 	.word	0x40021000
 8002620:	08002f38 	.word	0x08002f38
 8002624:	20000044 	.word	0x20000044
 8002628:	2000004c 	.word	0x2000004c

0800262c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002646:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b04      	cmp	r3, #4
 8002654:	d002      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x30>
 8002656:	2b08      	cmp	r3, #8
 8002658:	d003      	beq.n	8002662 <HAL_RCC_GetSysClockFreq+0x36>
 800265a:	e027      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800265e:	613b      	str	r3, [r7, #16]
      break;
 8002660:	e027      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	0c9b      	lsrs	r3, r3, #18
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	4a17      	ldr	r2, [pc, #92]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800266c:	5cd3      	ldrb	r3, [r2, r3]
 800266e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d010      	beq.n	800269c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	0c5b      	lsrs	r3, r3, #17
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	4a11      	ldr	r2, [pc, #68]	; (80026cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002686:	5cd3      	ldrb	r3, [r2, r3]
 8002688:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a0d      	ldr	r2, [pc, #52]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800268e:	fb02 f203 	mul.w	r2, r2, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	fbb2 f3f3 	udiv	r3, r2, r3
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	e004      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a0c      	ldr	r2, [pc, #48]	; (80026d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026a0:	fb02 f303 	mul.w	r3, r2, r3
 80026a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	613b      	str	r3, [r7, #16]
      break;
 80026aa:	e002      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80026ae:	613b      	str	r3, [r7, #16]
      break;
 80026b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b2:	693b      	ldr	r3, [r7, #16]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	371c      	adds	r7, #28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	007a1200 	.word	0x007a1200
 80026c8:	08002f48 	.word	0x08002f48
 80026cc:	08002f58 	.word	0x08002f58
 80026d0:	003d0900 	.word	0x003d0900

080026d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026dc:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <RCC_Delay+0x34>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0a      	ldr	r2, [pc, #40]	; (800270c <RCC_Delay+0x38>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	0a5b      	lsrs	r3, r3, #9
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026f0:	bf00      	nop
  }
  while (Delay --);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1e5a      	subs	r2, r3, #1
 80026f6:	60fa      	str	r2, [r7, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f9      	bne.n	80026f0 <RCC_Delay+0x1c>
}
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	20000044 	.word	0x20000044
 800270c:	10624dd3 	.word	0x10624dd3

08002710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e041      	b.n	80027a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fffc 	bl	8001734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f000 fa56 	bl	8002c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d001      	beq.n	80027c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e035      	b.n	8002834 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a16      	ldr	r2, [pc, #88]	; (8002840 <HAL_TIM_Base_Start_IT+0x90>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d009      	beq.n	80027fe <HAL_TIM_Base_Start_IT+0x4e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f2:	d004      	beq.n	80027fe <HAL_TIM_Base_Start_IT+0x4e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a12      	ldr	r2, [pc, #72]	; (8002844 <HAL_TIM_Base_Start_IT+0x94>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d111      	bne.n	8002822 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2b06      	cmp	r3, #6
 800280e:	d010      	beq.n	8002832 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002820:	e007      	b.n	8002832 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0201 	orr.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40012c00 	.word	0x40012c00
 8002844:	40000400 	.word	0x40000400

08002848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d020      	beq.n	80028ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01b      	beq.n	80028ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0202 	mvn.w	r2, #2
 800287c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f998 	bl	8002bc8 <HAL_TIM_IC_CaptureCallback>
 8002898:	e005      	b.n	80028a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f98b 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f99a 	bl	8002bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d020      	beq.n	80028f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d01b      	beq.n	80028f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f06f 0204 	mvn.w	r2, #4
 80028c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2202      	movs	r2, #2
 80028ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f972 	bl	8002bc8 <HAL_TIM_IC_CaptureCallback>
 80028e4:	e005      	b.n	80028f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f965 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f974 	bl	8002bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d020      	beq.n	8002944 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01b      	beq.n	8002944 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f06f 0208 	mvn.w	r2, #8
 8002914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2204      	movs	r2, #4
 800291a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f94c 	bl	8002bc8 <HAL_TIM_IC_CaptureCallback>
 8002930:	e005      	b.n	800293e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f93f 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f94e 	bl	8002bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f003 0310 	and.w	r3, r3, #16
 800294a:	2b00      	cmp	r3, #0
 800294c:	d020      	beq.n	8002990 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01b      	beq.n	8002990 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0210 	mvn.w	r2, #16
 8002960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2208      	movs	r2, #8
 8002966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f926 	bl	8002bc8 <HAL_TIM_IC_CaptureCallback>
 800297c:	e005      	b.n	800298a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f919 	bl	8002bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f928 	bl	8002bda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00c      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d007      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0201 	mvn.w	r2, #1
 80029ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe fe7c 	bl	80016ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00c      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d007      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fa6f 	bl	8002eb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00c      	beq.n	80029fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d007      	beq.n	80029fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f8f8 	bl	8002bec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00c      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0220 	mvn.w	r2, #32
 8002a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa42 	bl	8002ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_TIM_ConfigClockSource+0x1c>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e0b4      	b.n	8002bae <HAL_TIM_ConfigClockSource+0x186>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7c:	d03e      	beq.n	8002afc <HAL_TIM_ConfigClockSource+0xd4>
 8002a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a82:	f200 8087 	bhi.w	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
 8002a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a8a:	f000 8086 	beq.w	8002b9a <HAL_TIM_ConfigClockSource+0x172>
 8002a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a92:	d87f      	bhi.n	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
 8002a94:	2b70      	cmp	r3, #112	; 0x70
 8002a96:	d01a      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0xa6>
 8002a98:	2b70      	cmp	r3, #112	; 0x70
 8002a9a:	d87b      	bhi.n	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
 8002a9c:	2b60      	cmp	r3, #96	; 0x60
 8002a9e:	d050      	beq.n	8002b42 <HAL_TIM_ConfigClockSource+0x11a>
 8002aa0:	2b60      	cmp	r3, #96	; 0x60
 8002aa2:	d877      	bhi.n	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa4:	2b50      	cmp	r3, #80	; 0x50
 8002aa6:	d03c      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0xfa>
 8002aa8:	2b50      	cmp	r3, #80	; 0x50
 8002aaa:	d873      	bhi.n	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
 8002aac:	2b40      	cmp	r3, #64	; 0x40
 8002aae:	d058      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0x13a>
 8002ab0:	2b40      	cmp	r3, #64	; 0x40
 8002ab2:	d86f      	bhi.n	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab4:	2b30      	cmp	r3, #48	; 0x30
 8002ab6:	d064      	beq.n	8002b82 <HAL_TIM_ConfigClockSource+0x15a>
 8002ab8:	2b30      	cmp	r3, #48	; 0x30
 8002aba:	d86b      	bhi.n	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d060      	beq.n	8002b82 <HAL_TIM_ConfigClockSource+0x15a>
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d867      	bhi.n	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d05c      	beq.n	8002b82 <HAL_TIM_ConfigClockSource+0x15a>
 8002ac8:	2b10      	cmp	r3, #16
 8002aca:	d05a      	beq.n	8002b82 <HAL_TIM_ConfigClockSource+0x15a>
 8002acc:	e062      	b.n	8002b94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	6899      	ldr	r1, [r3, #8]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f000 f96a 	bl	8002db6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002af0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	609a      	str	r2, [r3, #8]
      break;
 8002afa:	e04f      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f000 f953 	bl	8002db6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b1e:	609a      	str	r2, [r3, #8]
      break;
 8002b20:	e03c      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f000 f8ca 	bl	8002cc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2150      	movs	r1, #80	; 0x50
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 f921 	bl	8002d82 <TIM_ITRx_SetConfig>
      break;
 8002b40:	e02c      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6859      	ldr	r1, [r3, #4]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f000 f8e8 	bl	8002d24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2160      	movs	r1, #96	; 0x60
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 f911 	bl	8002d82 <TIM_ITRx_SetConfig>
      break;
 8002b60:	e01c      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f000 f8aa 	bl	8002cc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2140      	movs	r1, #64	; 0x40
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f901 	bl	8002d82 <TIM_ITRx_SetConfig>
      break;
 8002b80:	e00c      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	f000 f8f8 	bl	8002d82 <TIM_ITRx_SetConfig>
      break;
 8002b92:	e003      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
      break;
 8002b98:	e000      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
	...

08002c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a2b      	ldr	r2, [pc, #172]	; (8002cc0 <TIM_Base_SetConfig+0xc0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d007      	beq.n	8002c28 <TIM_Base_SetConfig+0x28>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c1e:	d003      	beq.n	8002c28 <TIM_Base_SetConfig+0x28>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a28      	ldr	r2, [pc, #160]	; (8002cc4 <TIM_Base_SetConfig+0xc4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d108      	bne.n	8002c3a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a20      	ldr	r2, [pc, #128]	; (8002cc0 <TIM_Base_SetConfig+0xc0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <TIM_Base_SetConfig+0x52>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c48:	d003      	beq.n	8002c52 <TIM_Base_SetConfig+0x52>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <TIM_Base_SetConfig+0xc4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d108      	bne.n	8002c64 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a0d      	ldr	r2, [pc, #52]	; (8002cc0 <TIM_Base_SetConfig+0xc0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d103      	bne.n	8002c98 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f023 0201 	bic.w	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	611a      	str	r2, [r3, #16]
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	40012c00 	.word	0x40012c00
 8002cc4:	40000400 	.word	0x40000400

08002cc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	f023 0201 	bic.w	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f023 030a 	bic.w	r3, r3, #10
 8002d04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	621a      	str	r2, [r3, #32]
}
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f023 0210 	bic.w	r2, r3, #16
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	031b      	lsls	r3, r3, #12
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	621a      	str	r2, [r3, #32]
}
 8002d78:	bf00      	nop
 8002d7a:	371c      	adds	r7, #28
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr

08002d82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b085      	sub	sp, #20
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f043 0307 	orr.w	r3, r3, #7
 8002da4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	609a      	str	r2, [r3, #8]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr

08002db6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b087      	sub	sp, #28
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	60f8      	str	r0, [r7, #12]
 8002dbe:	60b9      	str	r1, [r7, #8]
 8002dc0:	607a      	str	r2, [r7, #4]
 8002dc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	021a      	lsls	r2, r3, #8
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	609a      	str	r2, [r3, #8]
}
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e041      	b.n	8002e90 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e58:	d004      	beq.n	8002e64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a10      	ldr	r2, [pc, #64]	; (8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d10c      	bne.n	8002e7e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	40000400 	.word	0x40000400

08002ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <__libc_init_array>:
 8002ec8:	b570      	push	{r4, r5, r6, lr}
 8002eca:	2600      	movs	r6, #0
 8002ecc:	4d0c      	ldr	r5, [pc, #48]	; (8002f00 <__libc_init_array+0x38>)
 8002ece:	4c0d      	ldr	r4, [pc, #52]	; (8002f04 <__libc_init_array+0x3c>)
 8002ed0:	1b64      	subs	r4, r4, r5
 8002ed2:	10a4      	asrs	r4, r4, #2
 8002ed4:	42a6      	cmp	r6, r4
 8002ed6:	d109      	bne.n	8002eec <__libc_init_array+0x24>
 8002ed8:	f000 f822 	bl	8002f20 <_init>
 8002edc:	2600      	movs	r6, #0
 8002ede:	4d0a      	ldr	r5, [pc, #40]	; (8002f08 <__libc_init_array+0x40>)
 8002ee0:	4c0a      	ldr	r4, [pc, #40]	; (8002f0c <__libc_init_array+0x44>)
 8002ee2:	1b64      	subs	r4, r4, r5
 8002ee4:	10a4      	asrs	r4, r4, #2
 8002ee6:	42a6      	cmp	r6, r4
 8002ee8:	d105      	bne.n	8002ef6 <__libc_init_array+0x2e>
 8002eea:	bd70      	pop	{r4, r5, r6, pc}
 8002eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef0:	4798      	blx	r3
 8002ef2:	3601      	adds	r6, #1
 8002ef4:	e7ee      	b.n	8002ed4 <__libc_init_array+0xc>
 8002ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002efa:	4798      	blx	r3
 8002efc:	3601      	adds	r6, #1
 8002efe:	e7f2      	b.n	8002ee6 <__libc_init_array+0x1e>
 8002f00:	08002f5c 	.word	0x08002f5c
 8002f04:	08002f5c 	.word	0x08002f5c
 8002f08:	08002f5c 	.word	0x08002f5c
 8002f0c:	08002f60 	.word	0x08002f60

08002f10 <memset>:
 8002f10:	4603      	mov	r3, r0
 8002f12:	4402      	add	r2, r0
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d100      	bne.n	8002f1a <memset+0xa>
 8002f18:	4770      	bx	lr
 8002f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f1e:	e7f9      	b.n	8002f14 <memset+0x4>

08002f20 <_init>:
 8002f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f22:	bf00      	nop
 8002f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f26:	bc08      	pop	{r3}
 8002f28:	469e      	mov	lr, r3
 8002f2a:	4770      	bx	lr

08002f2c <_fini>:
 8002f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2e:	bf00      	nop
 8002f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f32:	bc08      	pop	{r3}
 8002f34:	469e      	mov	lr, r3
 8002f36:	4770      	bx	lr
